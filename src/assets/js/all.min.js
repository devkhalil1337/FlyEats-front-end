var Company_ID = 30;
var Authen_Key = '1234567899';
var ListOfOptions = ['delivery', 'collection', 'table'];
var PaymentOptions = { cash: true, card: true };
var isAlergyPopup = false;
var isPreOrdering = false;
var isCustomOpeningTime = true;
var isMaxTotalPromo = false;
var maxPromoTotal = 25;
var maxPromoDiscount = 20;
var maxPromoDiscountType = 'percentage';
var maxDiscountOn = ['Delivery'];
var itemsDiscount = [
  // { orderType: 'Delivery', discountType: 'percentage', maxTotal: -1, maxDiscount: 10 },
  // { orderType: 'Collection', discountType: 'percentage', maxTotal: -1, maxDiscount: 20 }
];
var isCatOffer = false;
var catOfferId = [
  // { id: 4172, day: 'Sunday' }
];

//Live Services

// var API_Services = "http://onlineorderingws.jempos.com/";
//var API_Services = "https://www.saaccess.jempos.com/";
var API_Services = "https://www.oows2.jempos.com/";
var Logo_Path = "https://www.backoffice.jempos.com/images/CLogo/";
// var API_Services = "http://devoows.jempos.com/";
// var Logo_Path = "https://devbackoffice.jempos.com/images/CLogo/";


//Dev Services  
// var API_Services = "http://mobiletest.justemenu.net/";
// var Logo_Path = "http://devcms.jempos.com/images/CLogo/";


//This code will redirect to integration website
function redirectIntegration(){
    setTimeout(function(){		
        var host = window.location.pathname;	
        if(host != "/reset-password" && host != "/main" && host != "/checkout" && host != "/signup" && host != "/myorders" && host != "/myprofile" && host != "/myaddress" && host != "/trackorders" && host != "/addaddress" && host != "/editaddress" && host != "/ordercheckout" && host != "/home" && host != "/checkout-details") {		
            var path = "home/index.html";		
            window.location.href = path;		
        }		
    },0);	
}

/*
 AngularJS v1.6.9
 (c) 2010-2018 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(J,d){'use strict';function A(d){k&&d.get("$route")}function B(t,u,g){return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",link:function(a,f,b,c,m){function v(){l&&(g.cancel(l),l=null);n&&(n.$destroy(),n=null);p&&(l=g.leave(p),l.done(function(a){!1!==a&&(l=null)}),p=null)}function E(){var b=t.current&&t.current.locals;if(d.isDefined(b&&b.$template)){var b=a.$new(),c=t.current;p=m(b,function(b){g.enter(b,null,p||f).done(function(b){!1===b||!d.isDefined(w)||w&&!a.$eval(w)||u()});
v()});n=c.scope=b;n.$emit("$viewContentLoaded");n.$eval(k)}else v()}var n,p,l,w=b.autoscroll,k=b.onload||"";a.$on("$routeChangeSuccess",E);E()}}}function C(d,k,g){return{restrict:"ECA",priority:-400,link:function(a,f){var b=g.current,c=b.locals;f.html(c.$template);var m=d(f.contents());if(b.controller){c.$scope=a;var v=k(b.controller,c);b.controllerAs&&(a[b.controllerAs]=v);f.data("$ngControllerController",v);f.children().data("$ngControllerController",v)}a[b.resolveAs||"$resolve"]=c;m(a)}}}var x,
y,F,G,z=d.module("ngRoute",[]).info({angularVersion:"1.6.9"}).provider("$route",function(){function t(a,f){return d.extend(Object.create(a),f)}function u(a,d){var b=d.caseInsensitiveMatch,c={originalPath:a,regexp:a},g=c.keys=[];a=a.replace(/([().])/g,"\\$1").replace(/(\/)?:(\w+)(\*\?|[?*])?/g,function(a,b,d,c){a="?"===c||"*?"===c?"?":null;c="*"===c||"*?"===c?"*":null;g.push({name:d,optional:!!a});b=b||"";return""+(a?"":b)+"(?:"+(a?b:"")+(c&&"(.+?)"||"([^/]+)")+(a||"")+")"+(a||"")}).replace(/([/$*])/g,
"\\$1");c.regexp=new RegExp("^"+a+"$",b?"i":"");return c}x=d.isArray;y=d.isObject;F=d.isDefined;G=d.noop;var g={};this.when=function(a,f){var b;b=void 0;if(x(f)){b=b||[];for(var c=0,m=f.length;c<m;c++)b[c]=f[c]}else if(y(f))for(c in b=b||{},f)if("$"!==c.charAt(0)||"$"!==c.charAt(1))b[c]=f[c];b=b||f;d.isUndefined(b.reloadOnSearch)&&(b.reloadOnSearch=!0);d.isUndefined(b.caseInsensitiveMatch)&&(b.caseInsensitiveMatch=this.caseInsensitiveMatch);g[a]=d.extend(b,a&&u(a,b));a&&(c="/"===a[a.length-1]?a.substr(0,
a.length-1):a+"/",g[c]=d.extend({redirectTo:a},u(c,b)));return this};this.caseInsensitiveMatch=!1;this.otherwise=function(a){"string"===typeof a&&(a={redirectTo:a});this.when(null,a);return this};k=!0;this.eagerInstantiationEnabled=function(a){return F(a)?(k=a,this):k};this.$get=["$rootScope","$location","$routeParams","$q","$injector","$templateRequest","$sce","$browser",function(a,f,b,c,m,k,u,n){function p(e){var h=q.current;(y=(s=C())&&h&&s.$$route===h.$$route&&d.equals(s.pathParams,h.pathParams)&&
!s.reloadOnSearch&&!D)||!h&&!s||a.$broadcast("$routeChangeStart",s,h).defaultPrevented&&e&&e.preventDefault()}function l(){var e=q.current,h=s;if(y)e.params=h.params,d.copy(e.params,b),a.$broadcast("$routeUpdate",e);else if(h||e){D=!1;q.current=h;var H=c.resolve(h);n.$$incOutstandingRequestCount();H.then(w).then(z).then(function(c){return c&&H.then(A).then(function(c){h===q.current&&(h&&(h.locals=c,d.copy(h.params,b)),a.$broadcast("$routeChangeSuccess",h,e))})}).catch(function(b){h===q.current&&a.$broadcast("$routeChangeError",
h,e,b)}).finally(function(){n.$$completeOutstandingRequest(G)})}}function w(e){var a={route:e,hasRedirection:!1};if(e)if(e.redirectTo)if(d.isString(e.redirectTo))a.path=x(e.redirectTo,e.params),a.search=e.params,a.hasRedirection=!0;else{var b=f.path(),g=f.search();e=e.redirectTo(e.pathParams,b,g);d.isDefined(e)&&(a.url=e,a.hasRedirection=!0)}else if(e.resolveRedirectTo)return c.resolve(m.invoke(e.resolveRedirectTo)).then(function(e){d.isDefined(e)&&(a.url=e,a.hasRedirection=!0);return a});return a}
function z(a){var b=!0;if(a.route!==q.current)b=!1;else if(a.hasRedirection){var d=f.url(),c=a.url;c?f.url(c).replace():c=f.path(a.path).search(a.search).replace().url();c!==d&&(b=!1)}return b}function A(a){if(a){var b=d.extend({},a.resolve);d.forEach(b,function(a,e){b[e]=d.isString(a)?m.get(a):m.invoke(a,null,null,e)});a=B(a);d.isDefined(a)&&(b.$template=a);return c.all(b)}}function B(a){var b,c;d.isDefined(b=a.template)?d.isFunction(b)&&(b=b(a.params)):d.isDefined(c=a.templateUrl)&&(d.isFunction(c)&&
(c=c(a.params)),d.isDefined(c)&&(a.loadedTemplateUrl=u.valueOf(c),b=k(c)));return b}function C(){var a,b;d.forEach(g,function(c,g){var r;if(r=!b){var k=f.path();r=c.keys;var m={};if(c.regexp)if(k=c.regexp.exec(k)){for(var l=1,n=k.length;l<n;++l){var p=r[l-1],q=k[l];p&&q&&(m[p.name]=q)}r=m}else r=null;else r=null;r=a=r}r&&(b=t(c,{params:d.extend({},f.search(),a),pathParams:a}),b.$$route=c)});return b||g[null]&&t(g[null],{params:{},pathParams:{}})}function x(a,b){var c=[];d.forEach((a||"").split(":"),
function(a,d){if(0===d)c.push(a);else{var e=a.match(/(\w+)(?:[?*])?(.*)/),f=e[1];c.push(b[f]);c.push(e[2]||"");delete b[f]}});return c.join("")}var D=!1,s,y,q={routes:g,reload:function(){D=!0;var b={defaultPrevented:!1,preventDefault:function(){this.defaultPrevented=!0;D=!1}};a.$evalAsync(function(){p(b);b.defaultPrevented||l()})},updateParams:function(a){if(this.current&&this.current.$$route)a=d.extend({},this.current.params,a),f.path(x(this.current.$$route.originalPath,a)),f.search(a);else throw I("norout");
}};a.$on("$locationChangeStart",p);a.$on("$locationChangeSuccess",l);return q}]}).run(A),I=d.$$minErr("ngRoute"),k;A.$inject=["$injector"];z.provider("$routeParams",function(){this.$get=function(){return{}}});z.directive("ngView",B);z.directive("ngView",C);B.$inject=["$route","$anchorScroll","$animate"];C.$inject=["$compile","$controller","$route"]})(window,window.angular);
//# sourceMappingURL=angular-route.min.js.map

/*jslint browser: true*/
/*global console, MyApp, angular, Framework7*/

// Init angular
var MyApp = {};

MyApp.config = {
};

MyApp.angular = angular.module('MyApp', ["ngRoute"]);

MyApp.fw7 = {
  app : new Framework7({
    animateNavBackIcon: true
  }),
  options : {
    dynamicNavbar: true,
    domCache: true
  },
  views : []
};
/*jslint browser: true*/
/*global console, Framework7, MyApp, $document*/

MyApp.angular.factory('InitService', ['$document', function ($document) {
  'use strict';

  var pub = {},
    eventListeners = {
      'ready' : []
    };
  
  pub.addEventListener = function (eventName, listener) {
    eventListeners[eventName].push(listener);
  };

  function onReady() {
    var fw7 = MyApp.fw7,
      i;

    fw7.views.push(fw7.app.addView('.view-main', fw7.options));
    
    for (i = 0; i < eventListeners.ready.length; i = i + 1) {
      eventListeners.ready[i]();
    }
  }
  
  // Init
  (function () {
    $document.ready(function () {

      if (document.URL.indexOf("http://") === -1 && document.URL.indexOf("https://") === -1) {
        // Cordova
        console.log("Using Cordova/PhoneGap setting");
        document.addEventListener("deviceready", onReady, false);
      } else {
        // Web browser
        console.log("Using web browser setting");
        onReady();
      }
      
    });
  }());

  return pub;
  
}]);
/*jslint browser: true*/
/*global console, MyApp*/

MyApp.angular.controller('IndexPageController', ['$scope', '$http', 'InitService','myMethods','$location','$rootScope','$filter','$timeout','$anchorScroll','$window','ServerServices', function ($scope, $http, InitService,myMethods,$location,$rootScope,$filter,$timeout,$anchorScroll,$window,ServerServices) {
  'use strict';
  
  InitService.addEventListener('ready', function () {
    $scope.addAddressObj = {addressId:0,houseNumber:'',streetNumber:'',town:'',city:'',postalCode:'',country:'',addressType:''};
    var bussinessTime = {day:'',openTime:'',closeTime:'',isRestOpen:0};
    $scope.RestaurtantTime = {day:'',openTime:'',closeTime:'',restOn:0};
    $rootScope.restaurantObject = {restaurantName:'',restaurantDetails:'',restaurantAddress:'',country:'',MinOrderAmount:0,Icon:'',email:'',phoneNumber:'',DeliveryCharges:0,VatType:'',S_VAT:0,DeliveryTime:0,publicKey:'',Currency:'',hasWebExpired:'',LogoPath:Logo_Path};
    $scope.Pages = {home:'',orderNow:'',contactUs:'',currentPage:'',delivery:'',collection:'',table:'',about:'',news:'',book:'',menu:'',tastingMenu:'',gallery:''};
    $scope.cartProducts = {numberOfProducts:0,totalAmount:0.00};
    $scope.contactUs = {name:'',email:'',phoneNumber:'',message:''};
    $scope.bookingForm = {name:'',email:'',phone:'',date:'',time:'',guest:'',message:''};
    $scope.specialDiscount = {message:'',couponCode:'',discount:'',isCouponActive:''};
    $scope.pmethod = "cash";
    $scope.isLoyalty = false;
    $scope.loyaltyPerDollar = 0;
    $scope.loyaltyPerPurchase = 0;
    $scope.invoiceNumber = "";
    $scope.paymentMethod  = PaymentOptions;
    $scope.PaymentOptions = PaymentOptions;
    $rootScope.testrand = generateRandomString();
    $scope.CompId = Company_ID;
    $rootScope.Products = [];
    //Restaurant Details
    $scope.tableNo = '';
    $scope.restaurantDetails = [];
    $scope.restaurantName = "";
    $scope.restaurantAddress = "";
    $scope.restaurantPhoneNumber = "";
    $scope.CompIcon = "";
    $scope.restaurantEmail = "";
    /////////////////////////////
    $scope.alertMessage = "";
    $scope.isCartEmpty = true;
    ////////////////////////////
    $scope.categories = [];
    $scope.menuItems = [];
    $scope.Selections = [];
    $scope.modifierProducts = [];
    $scope.modifierProductslist = [];
    $scope.myAddresses = [];
    $scope.recentOrders = [];
    $scope.recentOrdersDetails = [];
    $scope.DeliveryCharges = 0;
    $scope.MinOrderAmount = 0;
    $scope.minimumorderamountleft = 0;
    $scope.DeliveryTime = 0;
    $scope.VatType = "";
    $scope.S_Vat = 0;
    $scope.OnlineTax = 0;
    $scope.UserLoginCredentials = [];
    var IsUserLogged = false;
    var adddressId = 0;
    $scope.customerId = "";
    $scope.firstName = "";
    $scope.lastName = "";
    $scope.number = "";
    $scope.password = "";
    $scope.userEmail = "";
    $scope.profile_postal_code = "";
    $scope.CouponCode = "";
    var public_key = "";
    $scope.modifierProductsQty = [];
    $scope.VoucherDiscount = 0;
    $scope.TotalAmount = 0;
    $scope.TotalProductsAmount = 0;
    $scope.ModiferHeadName = "";
    $scope.ModiferProductDetails = "";
    $scope.TotalAmountModifierProduct = 0;
    $scope.specialNotes = {
      text: ""
    };

    $scope.loyaltyRules = [];
    $scope.availablePoints = '0';
    $scope.availableVouchers = [];
    $scope.discountedPrice = 0;
    $scope.orderTypes = {
      collectionOrder: false,
      deliveryOrder: false,
      tableOrder: false
    }
    $scope.onlyDelivery = false;
    $scope.onlyCollection = false;
    $scope.onlyTableOrder = false;

    $scope.businessCalendar = [];

    $scope.cacheCart = {
      Delivery: [],
      Collection: [],
      TableOrder: []
    };

    $scope.public_key = null;

    $scope.disablePyament = false;
    $scope.currentPage = '';

    $scope.noDiscountCatIds = [ 7003, 7023 ];
    $scope.isGuestModule = false;

    $scope.guestDetails = {
      Firstname: '',
      Lastname: '',
      Email: '',
      Phoneno: ''
    }

    $scope.guestAddrDetails = {
      CompID: '',
      Address: '',
      Streetno: '',
      Postalcode: '',
      Houseno: '',
      City: '',
      address: ''
    }

    $scope.isPreOrdering = isPreOrdering;

    $scope.preTimings = {
      currentTime: 0,
      minTime: 0,
      maxTime: 0,
      minutes: '0',
      currentDate: 0,
      minDate: 0,
      maxDate: 0
    }

    $scope.preDays = 4;
    $scope.preDate = [];
    $scope.preMinutes = [];
    $scope.disablePreMinutes = true;

    $scope.isCustomOpeningTime = isCustomOpeningTime;

    $scope.customOpeningTime = null;

    $scope.isMaxTotalPromo = isMaxTotalPromo;
    $scope.maxPromoTotal = maxPromoTotal;
    $scope.maxPromoDiscount = maxPromoDiscount;
    $scope.maxPromoDiscountType = maxPromoDiscountType;
    $scope.maxDiscountOn = maxDiscountOn;
    $scope.isCatOffer = isCatOffer;
    $scope.catOfferId = catOfferId;
    $scope.itemsDiscount = itemsDiscount;

    $scope.ChangePage = function(PageName) {
      $scope.currentPage = PageName;
      $timeout(function() {
        $location.path("/" + PageName + "");
      });
    }
    
    angular.element(document).ready(function() {

      $scope.SplashScreen();
      //it will get the orders details back if pages gets refresh 
      if(localStorage.recent != null && $location.path()== "/trackorders") {
        $scope.getRecentOrdersDetails(JSON.parse(localStorage.recent));
      }
      //it will get the orders details back if pages gets refresh 
      if($location.path()== "/myaddress") {
        $scope.getMyAddresses();
      }
      
      $scope.getRestauratDetails();
      $scope.getRestauratCategories();
      // $scope.getModifierProducts();

      $scope.getSpecialDiscount();

      //getting business time
      $scope.getBusinessDays();

      $scope.isLoyaltyProgramEnabled();

      $scope.getLoyaltyRules();

      $scope.getRewardPoints();

      $scope.getAvailableVoucher();

      $scope.getOrderType();

      const currentDate = moment().format('YYYY-MM-DD');
      $scope.preTimings.currentDate = currentDate;

      $scope.fetchCustomTimings().then((res) => {
        $scope.customOpeningTime = res;
        if ($scope.isPreOrdering) {
          $scope.preTimings.currentDate = currentDate;
          $scope.setNextAvailableDate();
          $scope.preTimings.minDate = currentDate;
          $scope.preTimings.maxDate = moment(currentDate, 'YYYY-MM-DD').add(1, 'days').format('YYYY-MM-DD');        
        }
      });
      // $scope.preDate.push(currentDate);
      // $scope.preDate.push($scope.preTimings.maxDate);

      myMethods.getOrderTypes($scope.CompId).then(res => {
        if (res.status === 200 && res.data.length) {
          $scope.orderTypes.collectionOrder = res.data[0].CollectionOrder == 'True' ? true : false;
          $scope.orderTypes.deliveryOrder = res.data[0].DeliveryOrder == 'True' ? true : false;
          $scope.orderTypes.tableOrder = res.data[0].TableOrder == 'True' ? true : false;
          const keys = Object.keys(res.data[0]);
          var arrayOfTrue = [];
          keys.forEach(ele => {
            res.data[0][ele] === 'True' ? arrayOfTrue.push(ele): '';
          });

          if (arrayOfTrue.length == 1) {
            if (arrayOfTrue[0] === 'DeliveryOrder') {
              $scope.onlyDelivery = true;
              $scope.changeClass('delivery');
              $scope.onlyCollection = false;
              $scope.onlyTableOrder = false;
            } else if (arrayOfTrue[0] === 'CollectionOrder'){
              $scope.onlyDelivery = false;
              $scope.onlyCollection = true;
              $scope.changeClass('collection');
              $scope.onlyTableOrder = false;
            } else if (arrayOfTrue[0] === 'TableOrder') {
              $scope.onlyDelivery = false;
              $scope.onlyCollection = false;
              $scope.onlyTableOrder = true;
              $scope.changeClass('table');
            }
          } else if (arrayOfTrue.length > 1 && !$scope.orderTypeData) {
            if (arrayOfTrue[0] === 'DeliveryOrder') {
              $scope.orderTypeData = { name: 'Delivery'};
              $scope.selectedOrderType('delivery');
              $scope.OrderTypeVar = 'Delivery';
            } else if (arrayOfTrue[0] === 'CollectionOrder'){
              $scope.selectedOrderType('collection');
              $scope.orderTypeData.name = 'collection';
              $scope.OrderTypeVar = 'Collection';
            } else if (arrayOfTrue[0] === 'TableOrder') {
              $scope.selectedOrderType('TableOrder');
              $scope.OrderTypeVar = 'TableOrder';
              $scope.orderTypeData.name = 'Dine-in table# 01';
            }
          }

          var cacheCart = JSON.parse(localStorage.getItem('cacheCart'));

          if (cacheCart) {
            $scope.cacheCart = cacheCart;
            $rootScope.Products = $scope.cacheCart[$scope.orderTypeData.name];
          }
        }
      });

    });

    $scope.fetchCustomTimings = async () => {
      return new Promise(async (resolve, reject) => {
        await fetch('assets/bin/customTime.json')
          .then(response => response.json())
          .then(json => resolve(json));
      });
    }

    $scope.iterateDays = async (currentDate) => {
      for(var i = 0; i < $scope.preDays; i++) {
        const myDay = moment(currentDate, 'YYYY-MM-DD').add(i, 'days').format('YYYY-MM-DD');
        const res = await $scope.checkIfNextDayAvailable(myDay);
        if (currentDate == myDay && !res) {
          $scope.preTimings.currentDate = moment(currentDate, 'YYYY-MM-DD').add(1, 'days').format('YYYY-MM-DD');
        }
        if (res) {
          $scope.preDate.push(myDay);
        }
      }
    }

    $scope.setNextAvailableDate = async () => {
      const isAvailable = await $scope.checkIfNextDayAvailable($scope.preTimings.currentDate);
      
      if (!isAvailable) {
        $scope.preTimings.currentDate = moment($scope.preTimings.currentDate , 'YYYY-MM-DD').add(1, 'days').format('YYYY-MM-DD');
        await $scope.setNextAvailableDate();
        return;
      }
      return;
    }

    $scope.reinitiatePreMinutes = () => {
      $scope.preMinutes = [
        { id: 0, name: '00' },
        { id: 15, name: '15' },
        { id: 30, name: '30' },
        { id: 45, name: '45' }
      ];
      // $scope.preTimings.minutes = String($scope.preMinutes[0].name);
    }
    $scope.checkIfNextDayAvailable = async (date) => {
      const day = moment(date).format('dddd');
      if ($scope.isCustomOpeningTime) {
        const time = $scope.customOpeningTime[day];
        if (!time.length) { return false; }
        return true;
      }
      const { data: bussinessDays } = await myMethods.getBusinessDays($scope.CompId);
      const index = bussinessDays.findIndex(x => x.day == day);
      if (index !== -1) {
        return bussinessDays[index].closeTime == bussinessDays[index].openTime ? false : true;
      }
      return false;
    }

    $scope.checkOrderRoutes = () => {
      if($location.path() == '/home' || $location.path() == '/') {
        $scope.changeClass('home');
      } else if($location.path() == '/main') {
        const type = JSON.parse(localStorage.getItem("orderType"));
        if (type && type.name === 'Delivery') {
          $scope.changeClass('delivery');
        } else if (type && type.name === 'Collection') {
          $scope.changeClass('collection');
        } else if (type && type.name === 'TableOrder') {
          $scope.changeClass('table');
        } else {
          $scope.changeClass('orderNow');
        }
      } else if($location.path() == '/contact-us') {
        $scope.changeClass('contactUs');
      } else if($location.path() == '/about') {
        $scope.changeClass('about');
      } else if($location.path() == '/news') {
        $scope.changeClass('news');
      } else if($location.path() == '/book') {
        $scope.changeClass('book');
      } else if($location.path() == '/menu') {
        $scope.changeClass('menu');
      } else if($location.path() == '/tasting-menu') {
        $scope.changeClass('tastingMenu');
      } else {
        $scope.changeClass('');
      }
    }

    $scope.isTodayAvailableForPre = () => {
      var date = moment().format('YYYY-MM-DD');
      const index = $scope.preDate.findIndex(x => x === date);

      if (index !== -1) {
        $scope.preDate.splice(index, 1);
        return true;
      } else {
        return false;
      }
    }

    $scope.getMinMax = async (date) => {
      const day = moment(date).format('dddd');
      if ($scope.isCustomOpeningTime) {
        const data = await $scope.fetchCustomTimings();
        return data[day];
      } else {
        const { data: bussinessDays } = await myMethods.getBusinessDays($scope.CompId);
        const index = bussinessDays.findIndex(x => x.day == day);
        if (index !== -1) {
          return bussinessDays[index];
        }
      }
    }

    $scope.customDisableBetween = (data) => {
      if (data.length === 1) { return []; }
      let timeArray = [];
      for(var i = 0; i < data.length - 1; i++) { // ['4pm', '6pm'],
        if (data[i].closeTime == '11:59 PM') { data[i].closeTime = '12:00 AM' }
        timeArray.push([
          moment(data[i].closeTime, 'hh:mm A').format('hh:mma'),
          moment(data[i + 1].openTime, 'hh:mm A').format('hh:mma')
        ])
      }
      return timeArray;
    }

    $scope.customTimeModule = (data, prevDate) => {
      data[data.length - 1] = $scope.isFutureTime(data[data.length - 1], prevDate);
      return {
        openTime: data[0].openTime,
        closeTime: data[data.length - 1].closeTime,
        disableTime: $scope.customDisableBetween(data)
      };
    }

    $scope.fetchPrevNextDayTime = (item) => {
      const prevDate = moment($scope.preTimings.currentDate, 'YYYY-MM-DD').subtract(1, 'days');
      const prevLastTime = moment(`${prevDate.format('YYYY-MM-DD')} 11:59 PM`, 'YYYY-MM-DD hh:mm A');
      const prevStartTime = moment(`${prevDate.format('YYYY-MM-DD')} ${item.openTime}`, 'YYYY-MM-DD hh:mm A');
      const prevCloseTime = `${prevDate.format('YYYY-MM-DD')} ${item.closeTime}`;
      const isPrevBetweenDate = moment(prevCloseTime, 'YYYY-MM-DD hh:mm A').isBetween(prevStartTime, prevLastTime);
      if (!isPrevBetweenDate) { return true; }
    }

    $scope.isFutureTime = (ele, prevDate) => {
      const prevLastTime = moment(`${prevDate.format('YYYY-MM-DD')} 11:59 PM`, 'YYYY-MM-DD hh:mm A');
      const nowStartTime = moment(`${prevDate.format('YYYY-MM-DD')} ${ele.openTime}`, 'YYYY-MM-DD hh:mm A');
      const todayClose = moment(`${prevDate.format('YYYY-MM-DD')} ${ele.closeTime}`, 'YYYY-MM-DD hh:mm A').isBetween(nowStartTime, prevLastTime);
      if (!todayClose) {
        ele.closeTime = '11:59 PM';
      }
      return ele;
    }

    $scope.setPreDate = (date) => {
      if (!date) { return; }
      $scope.preTimings.currentDate = date;
      $scope.preOrderControl(true);
      $(".jem-nav").toggle();
    }

    $scope.preOrderControl = async (changeFromFront = false, isInit = false) => {
      try {
        showLoader();
        let data = null;
        let prevData = null;
        if (!$scope.isCustomOpeningTime) {
          data = await $scope.getMinMax($scope.preTimings.currentDate);
          const prevDate = moment($scope.preTimings.currentDate, 'YYYY-MM-DD').subtract(1, 'days');
          prevData = await $scope.getMinMax(prevDate);
          const prevLastTime = moment(`${prevDate.format('YYYY-MM-DD')} 11:59 PM`, 'YYYY-MM-DD hh:mm A');
          const prevStartTime = moment(`${prevDate.format('YYYY-MM-DD')} ${prevData.openTime}`, 'YYYY-MM-DD hh:mm A');
          const prevCloseTime = `${prevDate.format('YYYY-MM-DD')} ${prevData.closeTime}`;
          const isPrevBetweenDate = moment(prevCloseTime, 'YYYY-MM-DD hh:mm A').isBetween(prevStartTime, prevLastTime);
          if (!isPrevBetweenDate) {
            let currentData = { ...data };
            data = $scope.isFutureTime(data, prevDate);
            data.openTime = '12:00 AM';
            data.disableTime = [[
              moment(prevData.closeTime, 'hh:mm A').format('hh:mma'),
              moment(currentData.openTime, 'hh:mm A').format('hh:mma')
            ]]
          } else {
            data.disableTime = [[]];
          }
        }

        if ($scope.isCustomOpeningTime) {
          data = [ ...await $scope.getMinMax($scope.preTimings.currentDate) ];
          const prevDate = moment($scope.preTimings.currentDate, 'YYYY-MM-DD').subtract(1, 'days');
          prevData = [ ...await $scope.getMinMax(prevDate) ];
          if (prevData.length) {
            const filtered = prevData.filter($scope.fetchPrevNextDayTime);
            let prevTimings = [];
            filtered.forEach((ele, index) => {
              if (index == 0) {
                prevTimings.push({ openTime: '12:00 AM', closeTime: ele.closeTime})
              } else {
                prevTimings.push(ele);
              }
            });
            data = prevTimings.concat(data);
          }
          data = $scope.customTimeModule(data, prevDate);
        }

        let restOpen = moment(data.openTime, 'hh:mm A');
        let restClose = moment(data.closeTime, 'hh:mm A');
        const isBefore = moment().isBefore(restOpen);
        let min = moment(data.openTime, 'hh:mm A').format('HH');
        let max = moment(moment(data.closeTime, 'hh:mm A').subtract(1, 'hours')).format('HH');
        if ($scope.isCustomOpeningTime && !$scope.isTodayOpen() && !changeFromFront) {
          $scope.initTimePicker(min, max, data.disableTime);
        } else if (moment().format('YYYY-MM-DD') != $scope.preTimings.currentDate) {
          if (!isInit && changeFromFront) {
            $scope.updateTimePicker(min, max, data.disableTime);
          } else {
            $scope.initTimePicker(min, max, data.disableTime);
          }
          hideLoader();
          return;
        }
        const isBetween = moment().isBetween(restOpen, restClose);
        if (isBetween && moment().format('YYYY-MM-DD') == $scope.preTimings.currentDate) {
          min = moment().add(1, 'hour').format('HH');
          if (Number(min) > Number(max)) {
            min = moment().format('HH');
            max = '23'
            const isBetween = moment().isBetween(moment(min, 'HH'), moment(max, 'HH'));
            if (!isBetween) {
              data.disableTime = [[moment(min, 'HH').format('hh:mma'), '23:59am']]
            }
          }
        }
        if (changeFromFront && moment().format('YYYY-MM-DD') == $scope.preTimings.currentDate) {
          $scope.$apply(() => {
            $scope.disablePreMinutes = true;
            $scope.preTimings.currentTime = false;
            $scope.preTimings.minutes = false;
          });
          $scope.updateTimePicker(min, max, data.disableTime, true);
          return;
        }

        if (isBetween && moment().format('YYYY-MM-DD') == $scope.preTimings.currentDate) {
          const diff = moment().diff(restClose, 'minutes');
          if (diff <= 60) {
            min = restClose.format('HH');
            max = min;
            data.disableTime = [[moment(min, 'HH').format('hh:mma'), '23:59am']]
          }
          $scope.initTimePicker(min, max, data.disableTime, true);
        } else if (isBefore && moment().format('YYYY-MM-DD') == $scope.preTimings.currentDate) {
          min = (Number(min) + 1) + '';
          $scope.initTimePicker(min, max, data.disableTime);
        } else {
          const index = $scope.preDate.findIndex(x => x == moment().format('YYYY-MM-DD'));
          if (index !== -1) {
            $scope.preDate.splice(index, 1);
            $scope.$apply(() => {
              $scope.preTimings.currentDate = $scope.preDate[0];
            });
            await $scope.preOrderControl(false, true);
            hideLoader();
            return;
          }
        }
        hideLoader();
      } catch (error) {
        hideLoader();
      }
    }

    

    $scope.updateTimePicker = (min, max, disable = [], isAsap = false) => {
      try {
        $scope.reinitiatePreMinutes();
        let noneOption = [];
        let setTime = min;
        if (isAsap) {
          noneOption = [
            {
              label: 'ASAP',
              value: 'ASAP'
            }
          ];
          setTime = 'ASAP';
        }
        $('.timepicker').timepicker('option', 'minTime', min );
        $('.timepicker').timepicker('option', 'maxTime', max );
        $('.timepicker').timepicker('option', 'noneOption', noneOption );
        $('.timepicker').timepicker('option', 'disableTimeRanges', disable );
        $('.timepicker').timepicker('setTime', setTime);
        if (isAsap) {
          // $('.ui-timepicker-select option[value="ASAP"]').prop('selected', true)
          $('.timepicker').timepicker('setTime', setTime);
        }
        hideLoader();
      } catch (error) {
        hideLoader();  
      }
      $scope.timeChangeTrigger();
    }

    $scope.initTimePicker = (min, max, disable = [], isAsap = false) => {
      try {
        let data = {
          className: 'form-control',
          timeFormat: 'H',
          step: 60,
          minTime: min,
          maxTime: max,
          startTime: '10:00',
          disableTimeRanges: disable,
          dynamic: false,
          dropdown: true,
          scrollbar: true,
          zindex: 1043,
          disableTextInput: true,
          disableTouchKeyboard: true,
          selectOnBlur: true,
          useSelect: false
        }
  
        if (isAsap) {
          data.noneOption = [
            {
              label: 'ASAP',
              value: 'ASAP'
            }
          ];
          data.setTime = 'ASAP';
        } else {
          data.noneOption = [];
          data.setTime = min;
        }
  
        $('.timepicker').timepicker(data);
        if (isAsap) {
          $('.timepicker').timepicker('setTime', data.setTime);
          // $('.ui-timepicker-select option[value="ASAP"]').prop('selected', true)
        } else {
          $('.timepicker').timepicker('setTime', data.setTime);
        }
  
        if ($scope.preTimings.currentTime && !isAsap) {
          let rightNow = moment($scope.preTimings.currentTime).format('H');
          if (rightNow.includes('Invalid date')) {
            rightNow = min;
          }
          data.setTime = rightNow;
          data.defaultTime = rightNow;
          $('.timepicker').timepicker('setTime', rightNow);
        }
        $scope.timeChangeTrigger();
        $('.timepicker').on('selectTime', () => {
          $scope.timeChangeTrigger();
        });
        hideLoader();
      } catch (error) {
        hideLoader(); 
      }
    }

    $scope.timeChangeTrigger = () => {
      let timeVal = $('.timepicker').val();
      $scope.reinitiatePreMinutes();
      if (timeVal == 'ASAP' || timeVal == '' || timeVal == 'Invalid date') {
        timeVal = moment().format('HH:mm');
        // $('.ui-timepicker-select option:contains("ASAP")').prop('selected', true)
        $scope.preTimings.currentTime = timeVal;
        $scope.$apply(() => {
          $scope.preTimings.minutes = 0;
          $scope.disablePreMinutes = true;
        });
        return;
      }
      const time = moment(timeVal, 'HH:mm');
      
      console.log('time', time);
        // if ($scope.preTimings.minutes === '0') {
      $scope.reinitiatePreMinutes();
        // }
      $scope.$apply(async () => {
        if (!time) { return; }
        $scope.preTimings.currentTime = time;
        let timings = await $scope.getMinMax($scope.preTimings.currentDate);
        const selectedTime = `${$scope.preTimings.currentDate} ${moment(time).format('hh:mm A')}`;
        const restOpenTime = `${$scope.preTimings.currentDate} ${timings.openTime}`;
        const isOpenBeforSelected = moment(restOpenTime).isBefore(selectedTime);
        if (!isOpenBeforSelected) {
          const minutes = moment(timings.openTime, 'hh:mm A').minutes();
          const found = $scope.preMinutes.filter(x => x.id <= minutes);
          $scope.$apply(() => {
            if ($('.timepicker').val() == 'ASAP') { return; }
            $scope.preMinutes.splice(0, found.length);
            const index = $scope.preMinutes.findIndex(x => x.name == $scope.preTimings.minutes);
            if (index !== -1) {
              $scope.preTimings.minutes = `${$scope.preMinutes[index].name}`;
            } else {
              $scope.preTimings.minutes = `${$scope.preMinutes[0].name}`;
            }
            $scope.disablePreMinutes = false;
          })
        } else {
          if ($scope.preTimings.currentDate === moment().format('YYYY-MM-DD')) {
            const hours = moment().format('HH');
            const selectedHour = moment($scope.preTimings.currentTime).format('HH');
            if (hours === selectedHour) {
              const minutes = moment().minutes();
              const found = $scope.preMinutes.filter(x => x.id <= minutes);
              $scope.preMinutes.splice(0, found.length);
            }
          }
          $scope.$apply(() => {
            if ($('.timepicker').val() == 'ASAP') { return; }
            if (!$scope.preTimings.minutes || $scope.preTimings.minutes == '0' || $scope.preTimings.minutes == '00') {
              $scope.preTimings.minutes = `${$scope.preMinutes[0].name}`;
              $scope.disablePreMinutes = false;
            }
          });
        }
      });
    }

    $scope.proccedToPreOrdering = () => {
      if (!$rootScope.Products.length) {
        $scope.selectedOrderType($scope.OrderTypeVar);
        return;
      }
      if ($scope.preTimings.currentTime && ($scope.preTimings.currentDate && $scope.preTimings.currentTime !== 'Invalid date')) {
        // $scope.preTimings.currentTime = moment($scope.preTimings.currentTime).add($scope.preTimings.minutes, 'minutes').format('HH:mm');
        $.magnificPopup.close();
        $scope.checkoutProcess();
      }
    }
    $scope.isTodayOpen = () => {
      const today = moment().format('dddd');
      if (!$scope.customOpeningTime) { return false; }
      const todayTimeTable = $scope.customOpeningTime[today];
      if (!todayTimeTable.length) { return false; }
      return todayTimeTable;
    }

    $scope.isCustomOpen = () => {
      const todayTimeTable = $scope.isTodayOpen();
      if (!todayTimeTable) { return false; }
      var isOpen = false;
      for(var time of todayTimeTable) {
        const openTime = moment(time.openTime, 'hh:mm A');
        const closeTime = moment(time.closeTime, 'hh:mm A');
        isOpen = moment().isBetween(openTime, closeTime);
        if (isOpen) { break; }
      }
      return isOpen;
    }

// Start of New API
$scope.getRestauratDetails = function() {
  var formData = {
    CompID: $scope.CompId
  };
  $.when(ServerServices.getRestaurants(formData)).then(function(data) {
    $timeout(function() {
      if(data.status == 'success') {
        if(checkNetConnection()) {
          $scope.restaurantDetails = data.data.data;
          $scope.DeliveryCharges = $scope.restaurantDetails[0].DeliveryCharges == "" || $scope.restaurantDetails[0].DeliveryCharges == null ? 0 : $scope.restaurantDetails[0].DeliveryCharges;
          $scope.VatType = $scope.restaurantDetails[0].S_VARType;
          $scope.S_VAT = $scope.restaurantDetails[0].S_VAT;
          $scope.DeliveryTime = $scope.restaurantDetails[0].DeliveryTime;
          public_key = $scope.restaurantDetails[0].publicKey;
          $scope.public_key = public_key;
          $scope.restaurantName = $scope.restaurantDetails[0].RestName;
          $scope.restaurantAddress = $scope.restaurantDetails[0].CompAddress;
          $scope.restaurantPhoneNumber = $scope.restaurantDetails[0].CompPhone;
          $scope.MinOrderAmount = $scope.restaurantDetails[0].MinOrderAmount;
          $scope.CompIcon = $scope.restaurantDetails[0].CompIcon;
          $scope.restaurantEmail = $scope.restaurantDetails[0].CompEmail;
          $rootScope.restaurantObject['restaurantName'] = $scope.restaurantDetails[0].RestName;
          $rootScope.restaurantObject['email'] = $scope.restaurantDetails[0].CompEmail;
          $rootScope.restaurantObject['phoneNumber'] = $scope.restaurantDetails[0].CompPhone;
          $rootScope.restaurantObject['Currency'] = $scope.restaurantDetails[0].CompCurrency;
          $rootScope.restaurantObject['restaurantAddress'] = $scope.restaurantDetails[0].CompAddress == "" ? "" : $scope.restaurantDetails[0].CompAddress;
          $rootScope.restaurantObject['restaurantDetails'] = $scope.restaurantDetails[0].CompDetails;
          var hasWebExpired = $scope.restaurantDetails[0].hasWebAppExipred;
          var hasWebEnabled = $scope.restaurantDetails[0].ISWebApp;
          $rootScope.restaurantObject['hasWebExpired'] = !hasWebExpired && hasWebEnabled ? false : true;
          $rootScope.restaurantObject['country'] = $scope.restaurantDetails[0].CompCountry;
          $scope.addAddressObj.country = $scope.restaurantDetails[0].CompCountry;
          $scope.isGuestModule = $scope.restaurantDetails[0].idguestordering === 'True' ? true : false;
          if($rootScope.restaurantObject['hasWebExpired']) {
            var host = $window.location.host;
            var landingUrl = "Expired/expired.html";
            $window.location.href = landingUrl;
            return;
          }
          if($location.path() == '/myorders' && IsUserLogged) {
            $scope.getRecentOrders();
          }

          if($location.path() == '/checkout-details') {
            if ($scope.isPaymentAvailable('card')) {
              $scope.setStripCardForm();
            }
          }

          $scope.checkOrderRoutes();

          if($location.path() != '/trackorders') $scope.myStopFunction();
          setTimeout(function() {
            if(localStorage.ordertype != null) {
              $scope.OrderTypeVar = localStorage.ordertype;
              $scope.OrderType($scope.OrderTypeVar);
            } else {
              $scope.OrderTypeVar = "Delivery";
              $scope.OrderType($scope.OrderTypeVar);
            }
            addDeliveryAmount();
          }, 0);
        } else {
          swal("Connection Error", "there is problem in your internet connection!", "error");
          hideLoader();
        }
      }else{
        console.log('Failed to retrieve restaurant details');
        hideLoader();
      }
    });
  }, function(data) {
    console.log(data);
    console.log('Failed to retrieve restaurant details');
    hideLoader();
  });
};

$scope.checkCustomerValidations = (isValid) => {
  console.log(isValid)
  if (!isValid) {
    swal("Fields Missing", "Please fill all the required fields", "error");
  }
}

$scope.getRestauratCategories = function() {
  var formData = {
    CompID: $scope.CompId
  }
  $.when(ServerServices.getCategories(formData)).then(function(data) {
    $timeout(function() {
      if(data.status == 'success'){
        $scope.categories = data.data.data;
        $scope.getRestauratMenuItems();
      }
    });
  }, function(data) {
    console.log('Failed to retrieve restaurant categories');
    hideLoader();
  });
};

$scope.sorterFunc = function(item){
  return parseInt(item.RootCat_Orderby);
};

$scope.getRestauratMenuItems = function() {
  var formData = {
  }
  $.when(ServerServices.getMenuItems(formData)).then(function(data) {
    $timeout(function() {
      if(data.status == 'success'){
        $scope.menuItems = data.data.data;
        IsCategoriyEmpty($scope.categories, $scope.menuItems, $scope);
        hideLoader();
        scrollScript();
      }
      
    });
  }, function(data) {
    console.log('Failed to retrieve restaurant Menu Items');
    hideLoader();
  });
};

$scope.getModifierProducts = function() {
  var formData = {
    CompID: $scope.CompId
  }
  $.when(ServerServices.getModifierProducts(formData)).then(function(data) {
    $timeout(function() {
      if(data.status == 'success'){
        $scope.modifierProductslist = data.data.data;
      }
    });
  }, function(data) {
    console.log('Failed to retrieve restaurant modifier products');
    hideLoader();
  });
};


$scope.getAllBusinessTimes = async () => {
  $scope.businessCalendar = await myMethods.getBusinessDays($scope.CompId);
}

// fetching restaurant business time
$scope.getBusinessDays = function() {
  var currentTime = getCurrentTime();
  var Today = getCurrentDayName();
  var formData = {
    CompID: $scope.CompId,
    today: Today,
    Time: currentTime
  }
  $scope.getAllBusinessTimes();
  $.when(ServerServices.getBusinessDays(formData)).then(function(response) {
    $timeout(function() {
      if(response.status == 'success') {
        
        $scope.RestaurtantTime['day'] = response.data.data[0].dayOfWeek.trim();
        $scope.RestaurtantTime['openTime'] = response.data.data[0].openingTime.trim();
        $scope.RestaurtantTime['closeTime'] = response.data.data[0].closingTime.trim();
        $scope.RestaurtantTime['restOn'] = response.data.data[0].isRestOpen;
        const currentDate = moment().format('YYYY-MM-DD');

        if ($scope.isPreOrdering && $scope.RestaurtantTime['openTime'] == $scope.RestaurtantTime['closeTime']) {
          $scope.openPreOrderPopup();
        }

        if ($scope.preDate.length) { return; }
        $scope.iterateDays(currentDate);
      }
    });
  }, function(data) {
    console.log(data);
    $scope.RestaurtantTime['openTime'] = "00:00 AM";
    $scope.RestaurtantTime['closeTime'] = "00:00 AM";
    $scope.RestaurtantTime['restOn'] = false;
    console.log('Failed to retrieve restaurant details');
  });
};

//fetching events discount voucher
$scope.getSpecialDiscount = function() {
  var formData = {
    CompID: $scope.CompId
  };
  $.when(ServerServices.getVoucher(formData)).then(function(data) {
    $timeout(function() {
      if(data.status == 'success'){
          $scope.specialDiscount = data.data.data;
          // var dateFirst = new Date(CustomDateFormat($scope.specialDiscount[0].discountExpire));
          // var dateSecond = new Date(getCurrentDate());
          // // days difference
          // var diffDays = (dateFirst-dateSecond)/(1000*60*60*24);//Math.ceil(timeDiff / (1000 * 3600 * 24));
          // // difference
          // diffDays < 0 ? ($scope.specialDiscount.isCouponActive = false) : ($scope.specialDiscount.isCouponActive = true);  
          // console.log(data.data.data.isCouponActive)
        hideLoader();
      }
    });
  }, function(data) {
    console.log('Failed to retrieve restaurant special discount');
    hideLoader();
  });
};

/// end of new API functions
$scope.getRestProducts = function() {
      if(checkNetConnection()) {
        myMethods.getRestCategories($scope.CompId).then(function(response) {
          if(response.status == 200) {
            $scope.categories = response.data
              //                    console.log($scope.categories);
              //                    console.log("////////////////////////");
            myMethods.getRestMenuItems().then(function(resp) {
              if(response.status == 200) {
                $scope.menuItems = resp.data
//                console.log($scope.menuItems);
                IsCategoriyEmpty($scope.categories, $scope.menuItems, $scope);
                hideLoader();
                scrollScript();
                myMethods.getModifiersList($scope.CompId).then(function(response) {
                  if(response.status == 200) {
                    $scope.modifierProductslist = response.data;
                    //                                  console.log($scope.modifierProductslist);
                  }
                }, function(reason) {
                  console.log(reason);
                  hideLoader();
                });
              }
            });
          }
        },function(reason){
          console.log("categories error");
          console.log(reason);
          swal("Connection Error", "there is problem in your internet connection!", "error");
          hideLoader();
        });
      } else {
        swal("Connection Error", "there is problem in your internet connection!", "error");
        hideLoader();
      }
};

$scope.contactUsPage = function(){
  setTimeout(function(){
    $scope.ChangePage("contact-us");
  },0);
}

//Function to get Restaurant Categories and Menu Items
$scope.getRestItems = function() {
  showLoader();
  if(checkNetConnection()) {
    myMethods.getRestCategories($scope.CompId).then(function(response) {
      if(response.status == 200) {
        $scope.categories = response.data
          //console.log($scope.categories);     
        myMethods.getRestMenuItems().then(function(resp) {
          if(response.status == 200) {
            $scope.menuItems = resp.data
              //console.log($scope.menuItems);
            setTimeout(function() {
              $scope.ChangePage('main');
              hideLoader();
            }, 0);
            IsCategoriyEmpty($scope.categories, $scope.menuItems, $scope);
            myMethods.getModifiersList($scope.CompId).then(function(response) {
              if(response.status == 200) {
                $scope.modifierProductslist = response.data;
                //     console.log($scope.modifierProductslist);
              }
            }, function(reason) {
              console.log(reason);
              hideLoader();
            });
          }
        }, function(reason) {
          console.log(reason);
          hideLoader();
        });
      }
    }, function(reason) {
      console.log(reason);
      hideLoader();
    });
  } else {
    hideLoader();
    swal("Connection Error", "there is problem in your internet connection!", "error");
  }
};
$scope.loginError = "";
//User login function
$scope.UserLogin = (username, password) => {
  $scope.loginError = "";
  showLoader();
  if(isNull(username) || isNull(password)) {
    hideLoader();
    $scope.loginError = "Invalid Input, Please try again!";
  } else {
    if(checkNetConnection()) {
      var companyId = $scope.CompId;
      myMethods.UserLogin(username, password, companyId).then(async (response) => {
        if(response.status == 200) {
          $scope.UserLoginCredentials = response.data;
          if($scope.UserLoginCredentials.length > 0) {
            const points = await myMethods.getLoyaltyPoints(companyId, response.data[0].Customerid);
            $scope.availablePoints = points.data[0].LoyaltyPoints;
            $scope.firstName = ($scope.UserLoginCredentials[0].firstname).trim();
            $scope.lastName = ($scope.UserLoginCredentials[0].lastname).trim();
            $scope.number = ($scope.UserLoginCredentials[0].number).trim();
            $scope.password = ($scope.UserLoginCredentials[0].password).trim();
            $scope.userEmail = ($scope.UserLoginCredentials[0].email).trim();
            $scope.UserLoginCredentials[0].IsUserLogged = true;
            IsUserLogged = $scope.UserLoginCredentials[0].IsUserLogged;
            $scope.ChangePage(pageToRedirect);
            localStorage.setItem("login", JSON.stringify($scope.UserLoginCredentials));
            $scope.getAvailableVoucher();
            $scope.isGuest = false;
              // if ($scope.isGuest) {
                $scope.guestDetails = {
                  Firstname: '',
                  Lastname: '',
                  Email: '',
                  Phoneno: ''
                };
                $scope.guestAddrDetails = {
                  Houseno: '',
                  Streetno: '',
                  City: '',
                  Postalcode: '',
                  address: ''
                }
              // }
            swal("Login Success!", "Welcome " + $scope.firstName, "success");
            hideLoader();
            var logindata = JSON.parse(localStorage.login);
          } else {
            hideLoader();
            $scope.loginError = "Invalid Phone number or password!";
          }
        }
      }, function(reason) {
        hideLoader();
        console.log(reason);
      });
    } else {
      hideLoader();
      swal("Connection Error", "there is problem in your internet connection!", "error");
    }
  }
};

$scope.singUpError = "";
$scope.SignUp = function(firstName, lastName, password, email, number) {
  $scope.singUpError = "";
  if(isNull(firstName) || isNull(lastName) || isNull(password) || isNull(email) || isNull(number)) {
    $scope.singUpError = "Invalid Input, Please try again!";
    //            alert("Invalid Input, Please try again!");
  } else {
    showLoader();
    if(checkNetConnection()) {
      var CompanyId = $scope.CompId;
      myMethods.SignUp(firstName, lastName, password, email, number, CompanyId).then(function(response) {
        if(response.status == 200) {
          var status = response.data;
          if(status == 0) {
            swal("Account has been created successfully!", {
              icon: "success",
            });
            //                            alert("Account has been created successfully!");
            //                            $scope.alertMessage = "Account has been created successfully!";
            //                            openAlertPopup();
            $scope.firstName = firstName;
            $scope.number = number;
            $scope.password = password;
            pageToRedirect = "main";
            $scope.UserLogin($scope.number, $scope.password);
            //                            $scope.ChangePage("main");
          } else {
            $scope.singUpError = "This phone number is already registered.";
            // alert("Username is not available!");                        
          }
          hideLoader();
        }
      }, function(reason) {
        console.log(reason);
        hideLoader();
      });
    } else {
      swal("Connection Error", "there is problem in your internet connection!", "error");
      hideLoader();
    }
    // myMethods.UserNameValidate(number).then(function(response){
    //     if(response.status == 200){
    //         var resp = response.data;
    //         console.log("resp " + resp);
    //         if(resp == 1){
    //             alert("Username is not available");
    //         }else{
    //         }
    //     }
    // },function(reason){
    //     console.log(reason);
    // });
  }
};

$scope.couponDiscount = 0;
$scope.totalAmountOfRecentOrder = 0;
$scope.OrderID = 0;
$scope.recentordercomments = "";

$scope.getRecentOrders = function() {
  $scope.recentordercomments = "";
  showLoader();
  if(checkNetConnection()) {
    myMethods.getRecentOrders($scope.number, $scope.CompId).then(function(response) {
      if(response.status == 200) {
        $scope.recentOrders = response.data;
        $scope.recentOrders = getArrayInSeq($scope.recentOrders);
        setTimeout(function() {
          $scope.disablePyament = false;
          $scope.ChangePage("myorders");
          hideLoader();
        }, 0);
      }
    }, function(reason) {
      setTimeout(function() {
        console.log(reason);
        hideLoader();
      }, 0);
    });
  } else {
    swal("Connection Error", "there is problem in your internet connection!", "error");
    hideLoader();
  }
};
    
//This function is fetching order details 
$scope.recentordersdeliveryfieldShow = false;
$scope.recentordersdeliverycharges = 0;
$scope.recentOderStatus = false;
var x;
$scope.myStopFunction = function() {
  clearInterval(x);
}
$scope.orderDeliveryRemaingMinutes = 0;
$scope.orderDeliveryRemaingHours = 0;
$scope.DeliveryMinutes = "0";

$scope.getRecentOrdersDetails = function(Order) {
  showLoader();
  var dateTimeParse = Order.Recvorder_ExpectedDeliveryTime;
  var countDownDate = new Date(dateTimeParse.replace(/-/g, '/')).getTime();
  $scope.getCurrentDate = $filter('date')(new Date(), 'MM-dd-yyyy');
  $scope.getCurrentTime = $filter('date')(new Date(), 'hh:mm a');
  var days = 0,
    hours = 0,
    minutes = 0,
    seconds = 0;
  var now = new Date().getTime();
  var distance = countDownDate - now;
  days = Math.floor(distance / (1000 * 60 * 60 * 24));
  hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
  seconds = Math.floor((distance % (1000 * 60)) / 1000);
  hours >= 0 ? $scope.ExpectedDeliveryTime = Convert24HoursTo12Hours(countDownDate) : $scope.ExpectedDeliveryTime = checkTime(0) + ":" + checkTime(0);
  if(hours >= 0) {
    $scope.orderDeliveryRemaingMinutes = checkTime(minutes);
    $scope.orderDeliveryRemaingHours = checkTime(hours);
    x = setInterval(function() {
      var now = new Date().getTime();
      var distance = countDownDate - now;
      days = Math.floor(distance / (1000 * 60 * 60 * 24));
      hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      seconds = Math.floor((distance % (1000 * 60)) / 1000);
      $scope.$apply(function() {
        $scope.orderDeliveryRemaingMinutes = checkTime(minutes);
        $scope.orderDeliveryRemaingHours = checkTime(hours);
      });
      if(distance < 0) {
        clearInterval(x);
      }
    }, 1000);
  } else {
    $scope.orderDeliveryRemaingMinutes = checkTime(0);
    $scope.orderDeliveryRemaingHours = checkTime(0);
  }
  if(checkNetConnection()) {
    localStorage.setItem("recent", JSON.stringify(Order));
    $scope.OrderID = Order.Recvorder_InvoiceNo;
    var ordertype = findOrderType(Order.Recvorder_Tableid);
    myMethods.getRecentOrdersDetails(Order.Recvorder_InvoiceNo).then(function(response) {
      if(response.status == 200) {
        $scope.recentOrdersDetails = response.data;
        console.log($scope.recentOrdersDetails);
        setTimeout(function() {
          $scope.ChangePage("trackorders");
          hideLoader();
        }, 0);
        $scope.recentordercomments = Order.Recvorder_comments;
        $scope.TotalProductsAmount = getTotalBill($scope.recentOrdersDetails);
        $scope.couponDiscount = Order.Recvorder_VocherDiscountAmount;
        $scope.totalAmountOfRecentOrder = Order.Recvorder_Totalamount*1;
        $scope.OnlineTax = Order.VATAmount;
        $scope.S_Vat = Order.Recvorder_VATpercentage;
        $scope.VatType = Order.Recvorder_VATType;
        if($scope.VatType == 'Exclusive') {
          $scope.totalAmountOfRecentOrder += $scope.OnlineTax
        }
        $scope.recentordersdeliverycharges = Order.Recvorder_Deliverycharges;
        if(ordertype == 'Delivery') {
          $scope.recentordersdeliveryfieldShow = true;
        } else {
          $scope.recentordersdeliveryfieldShow = false;
        }
        $scope.recentOderStatus = isOrderCompleted(Order.Recvorder_status);
        setTimeout(function() {
          if(Order.Recvorder_status == 'pending') {
            var placed = angular.element(document.querySelector('#placed'));
            placed.addClass('active');
          } else if(Order.Recvorder_status == 'open' || Order.Recvorder_status == 'updated') {
            var placed = angular.element(document.querySelector('#placed'));
            placed.addClass('active');
            var confirmed = angular.element(document.querySelector('#confirmed'));
            confirmed.addClass('active');
          } else if(Order.Recvorder_status == 'in process') {
            var placed = angular.element(document.querySelector('#placed'));
            placed.addClass('active');
            var confirmed = angular.element(document.querySelector('#confirmed'));
            confirmed.addClass('active');
            var process = angular.element(document.querySelector('#process'));
            process.addClass('active');
          } else if(Order.Recvorder_status == 'assigned' || Order.Recvorder_status == 'ready' || Order.Recvorder_status == 'served') {
            var placed = angular.element(document.querySelector('#placed'));
            placed.addClass('active');
            var confirmed = angular.element(document.querySelector('#confirmed'));
            confirmed.addClass('active');
            var process = angular.element(document.querySelector('#process'));
            process.addClass('active');
            var completed = angular.element(document.querySelector('#completed'));
            completed.addClass('active');
          } else if(Order.Recvorder_status == 'on way') {
            var placed = angular.element(document.querySelector('#placed'));
            placed.addClass('active');
            var confirmed = angular.element(document.querySelector('#confirmed'));
            confirmed.addClass('active');
            var process = angular.element(document.querySelector('#process'));
            process.addClass('active');
            var ready = angular.element(document.querySelector('#onway'));
            ready.addClass('active');
            var completed = angular.element(document.querySelector('#completed'));
            completed.addClass('active');
          }
        }, 1000);
      }
    }, function(reason) {
      console.log(reason);
      setTimeout(function() {
        hideLoader();
      }, 0);
    });
  } else {
    swal("Connection Error", "there is problem in your internet connection!", "error");
    hideLoader();
  }
};

//Fetching address
$scope.getMyAddresses = function() {
  showLoader();
  if(checkNetConnection()) {
    myMethods.getAddressAPI($scope.number, $scope.CompId).then(function(response) {
      if(response.status == 200) {
        $scope.myAddresses = response.data;
        separateCollectionAddress($scope.myAddresses);
        // console.log($scope.myAddresses);
        setTimeout(function() {
          $scope.ChangePage('myaddress');
          hideLoader();
        }, 0);
      }
    }, function(reason) {
      console.log(reason);
      setTimeout(function() {
        hideLoader();
      }, 1000);
    });
  } else {
    swal("Connection Error", "there is problem in your internet connection!", "error");
    hideLoader();
  }
  setTimeout(function() {
    hideLoader();
  }, 1000);
};
$scope.getAddressesList = function() {
  myMethods.getAddressAPI($scope.number, $scope.CompId).then(function(response) {
    if(response.status == 200) {
      $scope.myAddresses = response.data;
      $scope.deleteEmptyAddres();
      separateCollectionAddress($scope.myAddresses);
      //console.log($scope.myAddresses);
      $scope.ChangePage('checkout-details');
      if ($scope.OrderTypeVar == 'Delivery') {
        $("#add-address").fadeOut(500);
        $("#address-list").fadeIn(500);
      }
    }
  }, function(reason) {
    console.log(reason);
  });
};
function isAdddressExist(){
  setTimeout(function() {
    if(checkNetConnection()) {
      myMethods.getAddressAPI($scope.number, $scope.CompId).then(function(response) {
        if(response.status == 200) {
          $scope.myAddresses = response.data;
          separateCollectionAddress($scope.myAddresses);
          //console.log($scope.myAddresses);
          if($scope.OrderTypeVar == "Collection") {
            deliveryAddressId = CollectionAddressId($scope.myAddresses);
            $scope.ChangePage('checkout-details');
            // setTimeout(function(){
            //     document.getElementById("deliveryaddress").style.display = "none";
            //     },0);
          } else if($scope.OrderTypeVar == "Delivery") {
            deliveryAddressId = defualtDeliveryAddressId($scope.myAddresses);
            if(deliveryAddressId == 0) {
              $scope.ChangePage('checkout-details');
              $scope.addressIcons['isNewAddress'] = true;
              $scope.addressIcons['isUpdate'] = false;
              //                                alert("dont have address");
              setTimeout(function() {
                $("#address-list").fadeOut(500);
                $("#add-address").fadeIn(500);
              }, 500);
              //                                alert("Please a delivery address!");
              //                                $scope.ChangePage('myaddress');
            } else {
              setTimeout(function() {
                $scope.ChangePage('checkout-details');
              }, 0);
            }
          }
          hideLoader();
        }
      }, function(reason) {
        console.log(reason);
        hideLoader();
      });
    } else {
      swal("Connection Error", "there is problem in your internet connection!", "error");
      hideLoader();
    }
  }, 0);
}

var isAddressForUpdate = false;

var isAddressUpdated = false;
//API to edit address
$scope.editAddress = function(addAddressObj) {
  if(isNull(addAddressObj.postalCode) || isNull(addAddressObj.houseNumber) || isNull(addAddressObj.city)) {
    swal("Please fill all (*) fields!", {
      icon: "warning",
    });
    isAddressUpdated = false;
  } else {
    swal({
      title: "Updating address",
      text: "Do you want to update this address as",
      icon: "warning",
      buttons: true,
      dangerMode: true,
      buttons: ["Other", "Main"],
    }).then(function(defaultAddress) {
      if(defaultAddress) {
        addAddressObj.addressType = "default";
        isAddressUpdated = true;
      } else {
        addAddressObj.addressType = "other";
        isAddressUpdated = true;
      }
      if(isAddressUpdated) {
        if(checkNetConnection()) {
          var companyId = $scope.CompId;
          var addressId = $scope.userID;
          addAddressObj.town = "";
          myMethods.updateAddressAPI($scope.number, addAddressObj.town, addAddressObj.streetNumber, addAddressObj.postalCode, addAddressObj.houseNumber, addAddressObj.addressType, companyId, addAddressObj.city, addressId).then(function(response) {
            if(response.status == 200) {
              swal("Address has been updated!", {
                icon: "success",
              });
              if($location.path() == '/checkout-details') {
                $scope.getAddressesList();
              } else {
                $scope.getMyAddresses();
              }
            }
          }, function(reason) {
            console.log(reason);
          });
        } else {
          swal("Connection Error", "there is problem in your internet connection!", "error");
          hideLoader();
        }
      }
    });
  }
};
//API to edit address
$scope.editCustAddress = function(houseNumber, street, postalCode, address, addressType, city) {
  if(isNull(postalCode) || isNull(address) || isNull(addressType) || isNull(city)) {
    swal("Please fill all (*) fields!", {
      icon: "warning",
    });
  } else {
    if(checkNetConnection()) {
      var companyId = $scope.CompId;
      var addressId = $scope.userID;
      myMethods.updateAddressAPI($scope.number, address, street, postalCode, houseNumber, addressType, companyId, city, $scope.userID).then(function(response) {
        if(response.status == 200) {
          swal("Address has been added successfully!", {
            icon: "success",
          });
          $scope.getAddressesList();
          setTimeout(function() {
            hideLoader();
          }, 500);
        }
      }, function(reason) {
        console.log(reason);
        setTimeout(function() {
          hideLoader();
        }, 500);
      });
    } else {
      swal("Connection Error", "there is problem in your internet connection!", "error");
      hideLoader();
    }
  }
  setTimeout(function() {
    hideLoader();
  }, 500);
};
//This function add an address 
var isAddressTypeSelected = false;
$scope.addNewAddress = function(addAddressObj) {
  showLoader();
  if(isNull(addAddressObj.postalCode) || isNull(addAddressObj.city) || isNull(addAddressObj.houseNumber)) {
    swal("Please fill all (*) fields!", {
      icon: "warning",
    });
    isAddressTypeSelected = false;
    hideLoader();
  } else {
    if(isAddressForUpdate) {
      $scope.editAddress(addAddressObj);
    } else {
      swal({
        title: "Adding new address",
        text: "Do you want to save this address as",
        icon: "warning",
        buttons: true,
        dangerMode: true,
        buttons: ["Other", "Main"],
      }).then(function(defaultAddress) {
        if(defaultAddress) {
          addAddressObj.addressType = "default";
          isAddressTypeSelected = true;
        } else {
          addAddressObj.addressType = "other";
          isAddressTypeSelected = true;
        }
        if(isAddressTypeSelected) {
          if(checkNetConnection()) {
            var username = $scope.number;
            var companyId = $scope.CompId;
            addAddressObj.town = '';
            myMethods.addAddressAPI(username, addAddressObj.town, addAddressObj.streetNumber, addAddressObj.houseNumber, addAddressObj.addressType, addAddressObj.postalCode, addAddressObj.city, companyId).then(function(response) {
              if(response.status == 200) {
                swal("Address has been added successfully!", {
                  icon: "success",
                });
                if($location.path() == '/checkout-details') {
                  $scope.getAddressesList();
                } else {
                  $scope.getMyAddresses();
                }
                $scope.addAddressObj = emptyAddressObject($scope.addAddressObj);
                setTimeout(function() {
                  hideLoader();
                }, 500);
              }
            }, function(reason) {
              console.log(reason);
              setTimeout(function() {
                hideLoader();
              }, 500);
            });
          } else {
            swal("Connection Error", "there is problem in your internet connection!", "error");
            hideLoader();
          }
        } else {
          swal("Select address type!", {
            icon: "warning",
          });
          hideLoader();
        }
      });
    }
  }
  setTimeout(function() {
    hideLoader();
  }, 500);
};

$scope.addressIcons = {isNewAddress:'',isUpdate:''};
$scope.addanAddress = function() {
    showLoader();
    //clearing the object 
    $scope.addAddressObj = emptyAddressObject($scope.addAddressObj);
    $scope.userID = "";
    $scope.houseNumber = "";
    $scope.street = "";
    $scope.postalCode = "";
    $scope.address = "";
    $scope.city = "";
    $scope.addressType = "";
    $scope.addressIcons['isNewAddress'] = true;
    $scope.addressIcons['isUpdate'] = false;
    setTimeout(function() {
      $scope.ChangePage('addaddress');
      hideLoader();
    }, 500);
};
//this function will reset all the values of texfield in checkout screen
$scope.addAddress = function() {
    $scope.userID = "";
    $scope.houseNumber = "";
    $scope.street = "";
    $scope.postalCode = "";
    $scope.address = "";
    $scope.city = "";
    $scope.addressType = "";
    isAddressForUpdate = false;
    $scope.addressIcons['isNewAddress'] = true;
    $scope.addressIcons['isUpdate'] = false;
        //// adding values to the object
     //clearing the object 
    $scope.addAddressObj = emptyAddressObject($scope.addAddressObj);
    $("#address-list").fadeOut(500);
    $("#add-address").fadeIn(500);
    //        $scope.ChangePage('addaddress');
};

$scope.cancelAdd = () => {
  $("#add-address").fadeOut(500);
  $("#address-list").fadeIn(500);
}

$scope.cancelEdit = () => {
  $("#edit-detail").fadeOut(100);
  $("#detail-list").fadeIn(500);
}

$scope.editDetails = () => {
  $("#detail-list").fadeOut(100)
  $("#edit-detail").fadeIn(500);
}

//this function will get all the values for textfield for update
$scope.editAnAddress = function(address) {
    showLoader();
    $scope.addressIcons['isNewAddress'] = false;
    $scope.addressIcons['isUpdate'] = true;

    //// adding values to the object
    $scope.addAddressObj.town = address.custAddress.trim();
    $scope.addAddressObj.streetNumber = address.custStreetNumber.trim();
    $scope.addAddressObj.postalCode = address.custPostalCode.trim();
    $scope.addAddressObj.houseNumber = address.custHouseNumber.trim();
    $scope.addAddressObj.city = address.custCity.trim();
    $scope.addAddressObj.addressType = address.custAddressType.trim();
    ///////////////////////////
    $scope.userID = address.addressId;
    $scope.houseNumber = address.custHouseNumber.trim();
    $scope.street = address.custStreetNumber.trim();
    $scope.postalCode = address.custPostalCode.trim();
    $scope.city = address.custCity.trim();
    $scope.address = address.custAddress.trim();
    $scope.addressType = address.custAddressType.trim();
    if($scope.addressType == "") 
      $scope.addressType = "other";
    //$scope.userID = address.userId.trim();
    if($location.path() == '/checkout-details') {
      $scope.ChangePage("checkout-details");
      $("#address-list").fadeOut(500);
      $("#add-address").fadeIn(500);
      isAddressForUpdate = true;
      hideLoader();
    } else {
      setTimeout(function() {
        $scope.ChangePage("editaddress");
        hideLoader();
      }, 500);
    }
    //console.log(address);
};
$scope.deleteCustomerAddress = function(address) {
  var addressVar = address.custAddressType.trim();
  var addressID = address.addressId;
  if(addressVar == 'other' || addressVar == '') {
    swal({
      title: "Deleting Address",
      text: "Do you really want to delete this address?",
      icon: "warning",
      buttons: true,
      dangerMode: true,
    }).then(function(willDelete) {
      if(willDelete) {
        if(checkNetConnection()) {
          myMethods.deleteAddress(addressID, $scope.number, $scope.CompId).then(function(resp) {
            if(resp.status == 200) {
              swal("Poof! Your imaginary file has been deleted!", {
                icon: "success",
              });
              $scope.getAddressesList();;
            }
          }, function(reason) {
            console.log(reason);
          });
        } else {
          swal("Connection Error", "there is problem in your internet connection!", "error");
          hideLoader();
        }
      }
    });
  } else {
    swal("Default address cannot be deleted!", {
      icon: "warning",
    });
  }
};
$scope.deleteAddress = function(address) {
  var addressVar = address.custAddressType.trim();
  var addressID = address.addressId;
  if(addressVar == 'other' || addressVar == '') {
    swal({
      title: "Deleting Address",
      text: "Do you want to delete this address?",
      icon: "warning",
      buttons: true,
      dangerMode: true,
    }).then(function(willDelete) {
      if(willDelete) {
        if(checkNetConnection()) {
          myMethods.deleteAddress(addressID, $scope.number, $scope.CompId).then(function(resp) {
            if(resp.status == 200) {
              swal("Address has been deleted!", {
                icon: "success",
              });
              $scope.getMyAddresses();
            }
          }, function(reason) {
            console.log(reason);
          });
        } else {
          swal("Connection Error", "there is problem in your internet connection!", "error");
          hideLoader();
        }
      }
    });
  } else {
    swal("Default address cannot be deleted!", {
      icon: "warning",
    });
  }
};
//Update User Profile
$scope.updateProfile = function(firstname, lastname, email, password) {
      if(isNull(firstname) || isNull(email) || isNull(password) || isNull(lastname)) {
        swal("Invalid Input, Please try again!", {
          icon: "error",
        });
        //alert("Invalid Input, Please try again!");
      } else {
        showLoader();
        if(checkNetConnection()) {
          myMethods.UpdateUserProfile(firstname, lastname, password, email, $scope.number, $scope.CompId).then(function(response) {
            if(response.status == 200) {
              swal("Your profile has been updated successfully!", {
                icon: "success",
              });
              //alert("Your account has been updated successfully!");
              var logindata = JSON.parse(localStorage.login);
              $scope.firstName = firstname;
              $scope.lastName = lastname;
              $scope.userEmail = email;
              $scope.password = password;
              logindata[0].firstname = firstname;
              logindata[0].lastname = lastname;
              logindata[0].email = email;
              logindata[0].password = password;
              hideLoader();

              //                    logindata[0].zipcode = zipcode;
              localStorage.setItem("login", JSON.stringify(logindata));
              $("#edit-detail").fadeOut(100);
              $("#detail-list").fadeIn(500);
            }
          }, function(reason) {
            hideLoader();
            console.log(reason);
          });
        } else {
          swal("Connection Error", "there is problem in your internet connection!", "error");
          hideLoader();
        }
      }
};
//End of API's Calling Code
var deliveryAddressId = 0;
$scope.selectAddress = function(address) {
    deliveryAddressId = 0;
    deliveryAddressId = address.addressId;
    //console.log(deliveryAddressId);
};
//Adding product into cart
var modifierProduct;
$scope.IsPreccedButtonDisable = true;
$scope.showSelectionModifierPopup = false;

$scope.superAddToCart = async (item) => {
  showLoader();
  if(item.MenuItem_HaveModifier == 1) {
    
    setTimeout(function() {
      $scope.open();
    }, 0);
  
    $scope.showSelectionModifierPopup = false;
    //$('#test-popup h3').html('');
    // $( "#test-popup" ).click(function() {
    //     $( "h3" ).remove();
    //   });
    if(checkNetConnection()) {
      myMethods.getProductSelection(item.MenuItemId).then(function(response) {
        if(response.status == 200) {
          //console.log(item);
          modifierProduct = item;
          $scope.modifierProducts.length = 0;
          $scope.modifierProductsQty.length = 0;
          $scope.TotalAmountModifierProduct = 0;
          $scope.Selections.length = 0;
          $scope.modifierProducts.length = 0;
          //                        $( "#modifierli" ).empty();
          $scope.ModiferHeadName = item.MenuItem;
          $scope.ModiferProductDetails = item.MenuItem_Detail;
          $scope.Selections = FindUniqueSelectionID(response.data); //this function will find only selections
          $scope.modifierProducts = removingEmptyProducts(response.data); //this function will find only modifers
          //This function will check if the first selection has more than one modifier selection available
          //it will var show skip button to user otherwise it will not show the skip button
          var checkFirstSelectionMiniAllow = CheckMinimnumSelection($scope.Selections, $scope.Selections[0])
            //console.log(checkFirstSelectionMiniAllow);
          if(checkFirstSelectionMiniAllow) {
            $scope.isButtonDisable = true;
          } else {
            $scope.isButtonDisable = false;
          }
          console.log($scope.Selections);
          setTimeout(function() {
            hideLoader();
          }, 500);
          //end of minimum selection code check
          //                     console.log(CheckMinimnumSelection($scope.Selections,$scope.Selections[0]));
        }
      }, function(reason) {
        setTimeout(function() {
          console.log(reason);
          hideLoader();
        }, 500);
      });
    } else {
      swal("Connection Error", "there is problem in your internet connection!", "error");
      hideLoader();
    }
  } else {
    addInCart(item, $rootScope.Products, $scope.restaurantDetails, $scope.categories, $scope.orderTypeData);
    //This function will store cart data into session
    // console.log("inserting;");
    // console.log($rootScope.Products);
    // console.log("inserting;");
    
    getUpdateAmount();
    //This condition wil add delivery charges + tax according to the quantity and price of
    //products
    if(DeliveryChargesAdd) {
      //                $scope.TotalAmount  = $scope.DeliveryCharges + $scope.TotalAmount;
      var VatType = $scope.restaurantDetails[0].S_VARType;
      var _caluclated_delivery_Charges = 0;
      var deliveryCharges = $scope.DeliveryCharges;
      _caluclated_delivery_Charges = getUpdateVatAmount($rootScope.Products, VatType, deliveryCharges);
      $scope.OnlineTax = $scope.OnlineTax + _caluclated_delivery_Charges;
    }
  }
  $scope.cacheCart[$scope.orderTypeData.name] = $rootScope.Products;
  localStorage.setItem("cacheCart", JSON.stringify($scope.cacheCart));
  hideLoader();
  addDeliveryAmount();
}
$scope.AddToCart = async function(item) {
  $scope.IsPreccedButtonDisable = true;
  if (isAlergyPopup) {
    swal({
      title: 'Do you have a food allergy?',
      text: `if you have a food alergy or intolerance (or someone you're ordering for has), phone the restaurant on ${$scope.restaurantPhoneNumber}`,
      buttons: [true, 'Add to cart'],
    }).then(async (addToCart) => {
      if (addToCart) {
        $scope.$apply(function() {
          $scope.superAddToCart(item);
        });
      }
    });
  } else {
    $scope.superAddToCart(item);
  }
};

$scope.ReOrder = function() {
    swal({
      //            title: "Are you sure?",
      text: "Do you want to add these items into cart?",
      icon: "warning",
      buttons: true,
      dangerMode: true,
    }).then(function(willDelete){
      if(willDelete) {
        showLoader();
        var testArr = [];
        //console.log(getMeUnique($scope.CompId));
        //console.log($scope.recentOrdersDetails);
        //console.log($scope.menuItems);
//        var recentOrdersProducts = $scope.recentOrdersDetails;
        var menuItemsProducts = $scope.menuItems;
        var modifierproductslist = $scope.modifierProductslist;
//        var reorderProductItems = [];
//        var counter = 0;
        var parentid = 0;
//        var selectionProduct;
//        var SelectionAndModifierProduct = []; // Selection and Modifier Array list
        var id = 0;
        if(getLastid($rootScope.Products) > 0) {
          id = getLastid($rootScope.Products);
        }
        var productid = 0;
        for(var i = 0; i < $scope.recentOrdersDetails.length; i++) {
          if($scope.recentOrdersDetails[i].MenuItem_HaveModifier == 0 && $scope.recentOrdersDetails[i].MenuItem_IsModifier == 0) {
            var productvat = findSimpleProductVat($scope.recentOrdersDetails[i], menuItemsProducts);
            testArr.push({
              id: id,
              RootCatID: $scope.recentOrdersDetails[i].RootCatID,
              MenuItemId: $scope.recentOrdersDetails[i].MenuItemId,
              parentMenuItemID: $scope.recentOrdersDetails[i].parentMenuItemID,
              MenuItem: $scope.recentOrdersDetails[i].MenuItem,
              quantity: $scope.recentOrdersDetails[i].quantity,
              price: $scope.recentOrdersDetails[i].price,
              MenuItem_HaveModifier: $scope.recentOrdersDetails[i].MenuItem_HaveModifier,
              MenuItem_IsModifier: $scope.recentOrdersDetails[i].MenuItem_IsModifier,
              OnlineTax: productvat,
              RG_ID:$scope.recentOrdersDetails[i].RG_ID
            });
            id++;
          } else if($scope.recentOrdersDetails[i].MenuItem_HaveModifier == 1) {
            var productvat = findSimpleProductVat($scope.recentOrdersDetails[i], menuItemsProducts);
            testArr.push({
              id: id,
              RootCatID: $scope.recentOrdersDetails[i].RootCatID,
              MenuItemId: $scope.recentOrdersDetails[i].MenuItemId,
              parentMenuItemID: $scope.recentOrdersDetails[i].parentMenuItemID,
              MenuItem: $scope.recentOrdersDetails[i].MenuItem,
              quantity: $scope.recentOrdersDetails[i].quantity,
              price: $scope.recentOrdersDetails[i].price,
              MenuItem_HaveModifier: 1,
              MenuItem_IsModifier: 0,
              OnlineTax: productvat,
              RG_ID:$scope.recentOrdersDetails[i].RG_ID
            });
            productid = id;
            id++;
            parentid = $scope.recentOrdersDetails[i].MenuItemId;
          }
          if($scope.recentOrdersDetails[i].MenuItem_IsModifier == 1 && $scope.recentOrdersDetails[i].parentMenuItemID == parentid && $scope.recentOrdersDetails[i].parentMenuItemID != 0) {
            var productvat = findSimpleProductVat($scope.recentOrdersDetails[i], modifierproductslist);
            testArr.push({
              id: productid,
              RootCatID: $scope.recentOrdersDetails[i].RootCatID,
              MenuItemId: $scope.recentOrdersDetails[i].MenuItemId,
              parentMenuItemID: $scope.recentOrdersDetails[i].parentMenuItemID,
              MenuItem: $scope.recentOrdersDetails[i].MenuItem,
              quantity: $scope.recentOrdersDetails[i].quantity,
              price: $scope.recentOrdersDetails[i].price,
              MenuItem_HaveModifier: $scope.recentOrdersDetails[i].MenuItem_HaveModifier,
              MenuItem_IsModifier: $scope.recentOrdersDetails[i].MenuItem_IsModifier,
              OnlineTax: productvat,
              RG_ID:$scope.recentOrdersDetails[i].RG_ID
            });
          }
        }
        setTimeout(function() {
          //console.log("test array");
          // console.log(testArr);
          //console.log("test array");
          addRecentOrderInToCart($rootScope.Products, testArr, $scope.restaurantDetails);
          localStorage.setItem("cart", JSON.stringify($rootScope.Products));
          getUpdateAmount();
          setTimeout(function() {
            if(DeliveryChargesAdd) {
              var VatType = $scope.restaurantDetails[0].S_VARType;
              var _caluclated_delivery_Charges = 0;
              var deliveryCharges = $scope.DeliveryCharges;
              _caluclated_delivery_Charges = getUpdateVatAmount($rootScope.Products, VatType, deliveryCharges);
              $scope.OnlineTax = $scope.OnlineTax + _caluclated_delivery_Charges;
              addDeliveryAmount();
            } else {
              $scope.TotalAmount = getTotalBill($rootScope.Products);
              $scope.TotalProductsAmount = getTotalAmount($rootScope.Products);
              $scope.OnlineTax = getSumOfVat($rootScope.Products);
            }
            setTimeout(function() {
              $scope.ChangePage("main");
              hideLoader();
              swal("items has been added into cart!", {
                icon: "success",
              });
            }, 500);
          }, 0);
        }, 0);
      }
    });
};
//Custom Filters
$scope.FilterSimpleProducts = function(item) {
  return filterOnlySimpleProducts(item);
};
$scope.FilterModifierProducts = function(item) {
  return FilterModifierProducts(item);
};
$scope.filterModifiersQuantity = function(item, md) {
  return filterModifiersQuantity(item, md);
};
$scope.RemoveSelectionAndModifierQuantity = function(item) {
  removeModifierProduct(item, $scope.modifierProductsQty);
};
//This function remove full product
$scope.removeItemCart = function(product) {
  var len = $rootScope.Products.length;
  var sessionArr = JSON.parse(localStorage.getItem('cacheCart'));
  var proQuantity = product.quantity;
  if(product.quantity === 1) {
    var index = $rootScope.Products.indexOf(product);
    $rootScope.Products.splice(index, 1);
    sessionArr[$scope.orderTypeData.name].splice(index, 1);
  } else if(product.quantity > 1) {
    for(var index = 0; index < $rootScope.Products.length; index++) {
      if($rootScope.Products[index].id == product.id) {
        $rootScope.Products.splice(index, 1);
        sessionArr[$scope.orderTypeData.name].splice(index, 1);
        break;
      }
    }
  }
  var ValueSet = 0;
  var counts = 0;
  var ValueCheck = 0;
  for(var i = 0; i <= len; i++) {
    if(counts <= (len)) {
      if(ValueCheck === 1) i = ValueSet;
      try {
        if($rootScope.Products[i].parentMenuItemID === product.MenuItemId && $rootScope.Products[i].id == product.id) {
          ValueSet = i;
          if(proQuantity > 1) {
            $rootScope.Products[i].quantity -= ($rootScope.Products[i].quantity / (proQuantity));
          } else if(proQuantity === 1) {
            $rootScope.Products[i].quantity -= ($rootScope.Products[i].quantity);
            sessionArr[$scope.orderTypeData.name][i].quantity -= ($rootScope.Products[i].quantity);
            ValueCheck = 1;
            i = ValueSet;
            $rootScope.Products.splice(i, 1);
            sessionArr[$scope.orderTypeData.name].splice(i, 1);
          }
        }
      } catch(e) {}
    }
    counts++;
  }
  proQuantity--;
  localStorage.setItem("cacheCart", JSON.stringify(sessionArr));
  isCouponApplied = false;
  $scope.disableCouponButton = false;
  $scope.CouponCode = "";
  $scope.VoucherDiscount = 0;
  getUpdateAmount();
  if(DeliveryChargesAdd) {
    $scope.TotalAmount = $scope.DeliveryCharges + getTotalBill($rootScope.Products);
    var VatType = $scope.restaurantDetails[0].S_VARType;
    var _caluclated_delivery_Charges = 0;
    var deliveryCharges = $scope.DeliveryCharges;
    _caluclated_delivery_Charges = getUpdateVatAmount($rootScope.Products, VatType, deliveryCharges);
    $scope.OnlineTax = $scope.OnlineTax + _caluclated_delivery_Charges;
  }
  if($rootScope.Products.length == 0) {
    showLoader();
    setTimeout(function() {
      $scope.ChangePage("main");
      hideLoader();
    }, 500);
  }
};

$scope.addqty = function(item) {
  addQuantity(item, $rootScope.Products, $scope.restaurantDetails);
  $scope.TotalProductsAmount = getTotalBill($rootScope.Products);
  $scope.TotalAmount = getTotalBill($rootScope.Products);
  $scope.OnlineTax = getSumOfVat($rootScope.Products);
  //whenever user add quantity if coupon is applied these two variables
  //will reset it
  isCouponApplied = false;
  $scope.disableCouponButton = false;
  $scope.CouponCode = "";
  $scope.VoucherDiscount = 0;
  if(DeliveryChargesAdd) {
    //        $scope.TotalAmount  = $scope.DeliveryCharges + $scope.TotalAmount;
    var VatType = $scope.restaurantDetails[0].S_VARType;
    var _caluclated_delivery_Charges = 0;
    var deliveryCharges = $scope.DeliveryCharges;
    _caluclated_delivery_Charges = getUpdateVatAmount($rootScope.Products, VatType, deliveryCharges);
    $scope.OnlineTax = $scope.OnlineTax + _caluclated_delivery_Charges;
  }
  addDeliveryAmount();
};
$scope.checkEmptyModifiers = () => {
  const filteredArray = $rootScope.Products.filter(x => x.quantity === 0);
  filteredArray.forEach(element => {
    const deleteIndex = $rootScope.Products.findIndex(x => x.MenuItemId == element.MenuItemId && x.quantity === 0);
      if (deleteIndex !== -1) {
        $rootScope.Products.splice(deleteIndex, 1);
      }
  });
};
//Remove Product from Cart
$scope.removeProduct = function(item) {
removeItemCart(item, $rootScope.Products, $scope.restaurantDetails, $scope.orderTypeData.name);
$scope.checkEmptyModifiers();
getUpdateAmount();
$scope.TotalProductsAmount = getTotalBill($rootScope.Products);
$scope.TotalAmount = getTotalBill($rootScope.Products);
$scope.OnlineTax = getSumOfVat($rootScope.Products);
//whenever user remove quantity if coupon is applied these two variables
//will reset it
isCouponApplied = false;
$scope.disableCouponButton = false;
$scope.CouponCode = "";
$scope.VoucherDiscount = 0;
if(DeliveryChargesAdd) {
  //        $scope.TotalAmount  = $scope.DeliveryCharges + $scope.TotalAmount;
  var VatType = $scope.restaurantDetails[0].S_VARType;
  var _caluclated_delivery_Charges = 0;
  var deliveryCharges = $scope.DeliveryCharges;
  _caluclated_delivery_Charges = getUpdateVatAmount($rootScope.Products, VatType, deliveryCharges);
  $scope.OnlineTax = $scope.OnlineTax + _caluclated_delivery_Charges;
}
addDeliveryAmount();
if($rootScope.Products.length == 0) {
  showLoader();
  setTimeout(function() {
    mobieProceed();
    $scope.ChangePage("main");
    hideLoader();
  }, 500);
}
//        removeProduct(item,$rootScope.Products);
};
  
//Custom Filters
 $scope.FilterSimpleProducts = function(item){
    return filterOnlySimpleProducts(item);
 }

 $scope.FilterModifierProducts = function(item){
   return FilterModifierProducts(item);
 }

 $scope.filterModifiersQuantity = function(item,md){
   return filterModifiersQuantity(item,md);
 }

 $scope.RemoveSelectionAndModifierQuantity = function(item){
    removeModifierProduct(item,$scope.modifierProductsQty);
 }
 //This function will check what type of order is this
 $scope.hideText = false;
 var DeliveryChargesAdd = false;
 $scope.OrderTypeVar = "";

 $scope.OrderType = function(type) {
   showLoader();
     var VatType = $scope.restaurantDetails.length ? $scope.restaurantDetails[0].S_VARType : '';
     $scope.OrderTypeVar = type;
     $scope.ordertype = type;
     if(type == 'Delivery') {
       //reset values 
       $scope.TotalAmount = 0;
       $scope.resetCoupon();
       var _caluclated_delivery_Charges = 0;
       $scope.OnlineTax = 0;
       ////////////////////
       //        $scope.TotalAmount  = $scope.DeliveryCharges + getTotalBill($rootScope.Products);
       $scope.TotalAmount = getTotalBill($rootScope.Products);
       var deliveryCharges = $scope.DeliveryCharges;
       _caluclated_delivery_Charges = getUpdateVatAmount($rootScope.Products, VatType, deliveryCharges);
       //console.log(_caluclated_delivery_Charges  + " test");
       $scope.OnlineTax = getSumOfVat($rootScope.Products) + _caluclated_delivery_Charges;
       //        $scope.hideText = true;
       DeliveryChargesAdd = true;
     } else if(type == 'Collection' || type == 'TableOrder') {
       //        adddressId = 0;
       //$scope.TotalAmount  = getTotalAmount($rootScope.Products);
       getUpdateAmount();
       $scope.OnlineTax = getSumOfVat($rootScope.Products); //will update again with default online Tax
       DeliveryChargesAdd = false;
       $scope.hideText = false;
     }
     localStorage.setItem("ordertype", type);
     addDeliveryAmount();
     hideLoader();
 };

   //This function will open pop up for selection and modifiers
 $scope.open = function() {
   $scope.IndexCount = 0; //This index will be start from zero for array index
   $scope.DisplayModifiersArr.length = 0;
   $scope.isButtonDisable = true; //Re Enable button of skip if its disabled
   $scope.fetchSelections();
   setTimeout(function() {
    $.magnificPopup.open({
      items: {
        src: '#test-popup',
        type: 'inline'
      }
    });
  }, 0);
   setTimeout(function() {
     $scope.showSelectionModifierPopup = true;
   }, 0);
 };

 $scope.openTableOrder = function() {
  $scope.showSelectionModifierPopup = true;
  $.magnificPopup.close();
  // table order pop opens here.
    setTimeout(function() {
      $.magnificPopup.open({
        items: {
          src: '#test-popup-table',
          type: 'inline'
        }
      });
    }, 0);
};

$scope.openPreOrderPopup = async () => {
  await $scope.preOrderControl();
  setTimeout(function() {
    $.magnificPopup.open({
      items: {
        src: '#pre-popup-time',
        type: 'inline'
      }
    });
  }, 0);
}

$scope.openTableOptions = function() {
  // table order pop opens here.
  if ($scope.onlyTableOrder) {
    $scope.openTableOrder();
    return;
  }
  $scope.showSelectionModifierPopup = true;
    $.magnificPopup.open({
      items: {
        src: '#popup-options',
        type: 'inline'
      }
    });
};


$scope.changeLocation = function() {
  $scope.tableNo = '';
  $.magnificPopup.close();
  $scope.getRestItems();
  // $scope.changeClass('orderNow');
}

$scope.getTotalBill = () => {
  return getTotalBill($rootScope.Products)
}

$scope.selectedOrderType = function(type) {
  showLoader();
  mobieProceed();
  if ($scope.orderTypeData && $scope.orderTypeData.name != type) {
    $scope.cacheCart[$scope.orderTypeData.name] = $rootScope.Products;
    localStorage.setItem('cacheCart', JSON.stringify($scope.cacheCart));
    $rootScope.Products = $scope.cacheCart[type];
  }
  if (type == 'Delivery') {
    localStorage.setItem("orderType", JSON.stringify({name: 'Delivery'}));
    $scope.changeClass('delivery');
    $scope.OrderType('Delivery');
    $scope.changeLocation();
    return;
  } else if (type == 'Collection') {
    localStorage.setItem("orderType", JSON.stringify({name: 'Collection'}));
    $scope.changeClass('collection');
    $scope.OrderType('Collection');
    $scope.changeLocation();
    return;
  } else if (type == 'TableOrder') {
    if (!$scope.tableNo) {
      $scope.tableNoError = 'Please Enter Table No. Thank You.';
      return;
    }
    const params = {
      name: 'TableOrder',
      table: $scope.tableNo
    };
    $scope.changeClass('table');
    localStorage.setItem("orderType", JSON.stringify(params));
    $scope.OrderType('TableOrder');
    $scope.changeLocation();
  }
  hideLoader();
}

$scope.resetCoupon = () => {
  isCouponApplied = false;
  $scope.disableCouponButton = false;
  $scope.VoucherDiscount = 0;
  $scope.DeliveryCharges = $scope.restaurantDetails[0].DeliveryCharges == "" || $scope.restaurantDetails[0].DeliveryCharges == null ? 0 : $scope.restaurantDetails[0].DeliveryCharges;
}

$scope.setTableNo = function(no) {
  if ((!$scope.tableNo && no == '0') || (Number($scope.tableNo + no) > 299)) {
    return;
  } 
  $scope.tableNo += no;
}

$scope.removeSingleChar = function() {
  if ($scope.tableNo.length) {
    $scope.tableNo = $scope.tableNo.slice(0, -1);
  }
}

$scope.getOrderType = function() {
  const type = JSON.parse(localStorage.getItem("orderType"));
  if (type) {
    $scope.orderTypeData = type;
  }
}

$scope.isOptionAvailable = function (option) {
  // console.log('options', option, $scope.orderTypes[option]);
  if (!$scope.orderTypes[option]) {
    return false;
  }

  return $scope.orderTypes[option];
  
  // const index  = ListOfOptions.findIndex(x => x == option);
  // if (index == -1) {
  //   return false;
  // } else {
  //   return true;
  // }
}

$scope.setPaymentOption = () => {
  if (PaymentOptions.card && PaymentOptions.cash) {
    $scope.pmethod = 'cash';
  } else {
    $scope.pmethod = PaymentOptions.card ? 'card' : 'cash';
  }
}

$scope.isPaymentAvailable = function (option) {
  return PaymentOptions[option];
}

 //This function will apply voucher if user has a coupon/voucher code
var isCouponApplied = false;
$scope.disableCouponButton = false;
var Coupon_Code = "";
$scope.HaveCoupon = function(Code) {
  showLoader();
  Coupon_Code = Code;
  var VatType = $scope.restaurantDetails[0].S_VARType;
  var discount = 0;
  var totalAmount = 0;
  if(!isCouponApplied) {
    if(checkNetConnection()) {
      myMethods.HaveCoupon($scope.CompId, Code, $scope.subTotalAmount, $scope.number).then(function(response) {
        if(response.status == 200) {
          discount = response.data;
          if (discount == 0) {
            swal("", "Invalid Coupon.", "error");
            $scope.disableCouponButton = false;
          } else if (discount == 1) {
            swal("", "Invalid Coupon.", "error");
            $scope.disableCouponButton = false;
          } else if (discount == 2) {
            swal("", "Voucher is not active.", "error");
            $scope.disableCouponButton = false;
          } else if (discount == 3) {
            $scope.disableCouponButton = false;
            swal("", "Voucher has expired.", "error");
            $scope.disableCouponButton = false;
          } else if (discount == 5) {
            swal("", "You cannot use this voucher anymore.", "error");
            $scope.disableCouponButton = false;
          }else{
            console.log("Discount percentage " + discount);
            //voucherTotalDiscountvoucherTotalDiscount = discount; //for record
            $scope.VoucherDiscount = calculateTotalAmount($scope.subTotalAmount, discount);
            totalAmount = getUpdateVatAmount($rootScope.Products, VatType, $scope.VoucherDiscount);
            //console.log(response);
            $scope.OnlineTax -= totalAmount;
            //                    console.log("amount to deduct from vat "+totalAmount);
            $scope.TotalAmount -= $scope.VoucherDiscount;
            isCouponApplied = true;
            $scope.disableCouponButton = true;
          }

          //                    $scope.CouponCode = null;
          //                    $scope.CouponCode = "";
          setTimeout(function() {
            hideLoader();
          }, 0);
        }
      }, function(reason) {
        console.log(reason);
        swal("Server Error", "failed to verify the discount code.", "error");
        setTimeout(function() {
          hideLoader();
        }, 0);
      });
    } else {
      swal("Connection Error", "there is problem in your internet connection!", "error");
      hideLoader();
    }
  } else {
    setTimeout(function() {
      hideLoader();
      swal({
        //                    title: "Good job!",
        text: "discount has already applied!",
        icon: "warning",
      });
      //                alert("discount has already applied!");
    }, 500);
  }
};

$scope.maxAllowedLen = 0;
$scope.IndexCount = 0;
$scope.isButtonDisable = false;

$scope.skipSelection = function() {
  modifierQuantity = 0;
  $scope.IndexCount = $scope.IndexCount + 1;
  var counter = $scope.IndexCount;
  if($scope.IndexCount == $scope.Selections.length) {
    counter = counter - 1;
  }
  var checkFirstSelectionMiniAllow = CheckMinimnumSelection($scope.Selections, $scope.Selections[counter])
    // console.log(checkFirstSelectionMiniAllow);
  if(checkFirstSelectionMiniAllow) {
    $scope.isButtonDisable = true;
  } else {
    $scope.isButtonDisable = false;
  }
  if($scope.IndexCount >= ($scope.Selections.length)) {
    $scope.isButtonDisable = false;
  }
  $scope.fetchSelections($scope.Selections[counter]);
  // if($scope.IndexCount < ($scope.Selections.length - 1))
  //     $scope.IndexCount = $scope.IndexCount + 1;
  // else
  //     alert("Selection end");            
};
var maxAllow = 0;
var minAllow = 0;
var modifierQuantity = 0;
$scope.DisplayModifiersArr = [];

$scope.IsMoreSelectionAllow = function(selection) {
  for(var i = 0; i < $scope.modifierProductsQty.length; i++) {
    if($scope.modifierProductsQty[i].SelectionID === selection.SelectionID) {
      modifierQuantity += $scope.modifierProductsQty[i].quantity;
    }
  }
  if(modifierQuantity == maxAllow) {
    $scope.skipSelection();
  }
};

$scope.getTotalModifier = (selection) => {
  return $scope.DisplayModifiersArr.filter(x => x.SelectionID === selection.SelectionID).length;
}

$scope.fetchSelections = (selection = null) => {
  $scope.disableAddToBasket = true;
  if (!selection || !$scope.Selections.length) { return; }

  if ($scope.Selections[$scope.Selections.length - 1].SelectionID === selection.SelectionID) {
    if ($scope.getTotalModifier(selection) >= selection.MinimumSelection) {
      $scope.disableAddToBasket = false;
    }
  }
}

$scope.AddSelectionProducts = function(selection, modifier, bool) {
  if(selection.Type == "M") {
    maxAllow = 0;
    modifierQuantity = 0;
    if(selection.SelectionID == modifier.SelectionID) {
      minAllow = selection.MinimumSelection;
      maxAllow = selection.MaximumSelection;
    }
    if(minAllow == 0) {
      $scope.isButtonDisable = true;
      if(modifierQuantity < maxAllow) {
        addModifierProducts(modifier, $scope.modifierProductsQty, $scope.DisplayModifiersArr);
        $scope.TotalAmountModifierProduct = getTotalAmountOfModifiers($scope.modifierProductsQty);
        $scope.IsMoreSelectionAllow(selection);
      }
    } else if(minAllow > 0) {
      $scope.isButtonDisable = false;
      if(modifierQuantity < maxAllow) {
        addModifierProducts(modifier, $scope.modifierProductsQty, $scope.DisplayModifiersArr);
        $scope.TotalAmountModifierProduct = getTotalAmountOfModifiers($scope.modifierProductsQty);
        $scope.IsMoreSelectionAllow(selection); // this function will increase the qty of modifiers until maxmium allow selections
        //This condition will call when the user selects atleast one modifier on minimum selection more than 1
        if(modifierQuantity >= minAllow) {
          $scope.isButtonDisable = true;
        } //End
      }
    }
    setTimeout(function() {}, 0);
  } else if(selection.Type == "S") {
    addModifierProducts(modifier, $scope.modifierProductsQty, $scope.DisplayModifiersArr);
    $scope.TotalAmountModifierProduct = getTotalAmountOfModifiers($scope.modifierProductsQty);
    for(var i = 0; i < $scope.modifierProductsQty.length; i++) {
      if($scope.modifierProductsQty[i].SelectionID === selection.SelectionID) {
        modifierQuantity += $scope.modifierProductsQty[i].quantity;
      }
    }
    if(modifierQuantity > 0) $scope.IndexCount = $scope.IndexCount + 1;
    if ($scope.Selections[$scope.IndexCount] && $scope.Selections[$scope.IndexCount].MinimumSelection === 0) {
      $scope.isButtonDisable = true;
    }
  }
  $scope.fetchSelections(selection);
};
    
$scope.AddModifierProductIntoCart = function() {
  showLoader();
  var magnificPopup = $.magnificPopup.instance;
  // save instance in magnificPopup variable
  magnificPopup.close();
  //        addModifierProductsToCart($rootScope.Products,$scope.modifierProductsQty,modifierProduct,$scope.TotalAmount);
  addModifierProductsToCart($rootScope.Products, $scope.modifierProductsQty, modifierProduct, $scope.restaurantDetails, $scope.categories, $scope.orderTypeData);
  getUpdateAmount();
  if(DeliveryChargesAdd) {
    //            $scope.TotalAmount  = $scope.DeliveryCharges + getTotalBill($rootScope.Products);
    var VatType = $scope.restaurantDetails[0].S_VARType;
    var _caluclated_delivery_Charges = 0;
    var deliveryCharges = $scope.DeliveryCharges;
    _caluclated_delivery_Charges = getUpdateVatAmount($rootScope.Products, VatType, deliveryCharges);
    $scope.OnlineTax = $scope.OnlineTax + _caluclated_delivery_Charges;
  }
  setTimeout(function() {
    hideLoader();
  }, 1000);
  addDeliveryAmount();
  //        getUpdateAmount();
};
//Calculating new vat after applying voucher discount
$scope.updateVat = function() {
  var VatType = $scope.restaurantDetails[0].S_VARType;
  var discountedAmount = 0;
  //        getUpdateVatAmount($rootScope.Products,VatType,amountToApply);
};
//This function will get the sum of all products
function getUpdateAmount() {
  $scope.TotalAmount = getTotalBill($rootScope.Products);
  $scope.OnlineTax = getSumOfVat($rootScope.Products);
  $scope.TotalProductsAmount = getTotalAmount($rootScope.Products);
  //below code will reset the applied voucher amount
  isCouponApplied = false;
  $scope.disableCouponButton = false;
  $scope.CouponCode = "";
  $scope.VoucherDiscount = 0;
  $scope.discountedPrice = 0;
};

$scope.promoModule = () => {
  if ($scope.isMaxTotalPromo) {
    $scope.discountedPrice = 0;
    const index = $scope.maxDiscountOn.findIndex(x => x === $scope.OrderTypeVar);
    if (index === -1) { return; }
    $scope.subTotalAmount = getTotalBill($rootScope.Products);
    if ($scope.subTotalAmount >= $scope.maxPromoTotal) {
      if ($scope.maxPromoDiscountType == 'percentage') {
        $scope.discountedPrice = calculateTotalAmount($scope.subTotalAmount, $scope.maxPromoDiscount);
        $scope.TotalAmount -= $scope.discountedPrice;
      } else {
        $scope.discountedPrice = $scope.maxPromoDiscount;
        $scope.TotalAmount -= $scope.maxPromoDiscount;
      }
    }
  }
}

var pageToRedirect = "";
$scope.checkoutProcess = function() {
showLoader();
//        alert(IsUserLogged);
if(IsUserLogged) {
  setTimeout(function() {
    if(checkNetConnection()) {
      myMethods.getAddressAPI($scope.number, $scope.CompId).then(function(response) {
        if(response.status == 200) {
          $scope.myAddresses = response.data;
          separateCollectionAddress($scope.myAddresses);

        
          //console.log($scope.myAddresses);
          if($scope.OrderTypeVar == "Collection" || $scope.OrderTypeVar == "TableOrder") {
            deliveryAddressId = CollectionAddressId($scope.myAddresses);
            $scope.ChangePage('checkout-details');
            mobieProceed();
            // setTimeout(function(){
            //     document.getElementById("deliveryaddress").style.display = "none";
            //     },0);
          } else if($scope.OrderTypeVar == "Delivery") {
            deliveryAddressId = defualtDeliveryAddressId($scope.myAddresses);
            if(deliveryAddressId == 0) {
              $scope.ChangePage('checkout-details');
              mobieProceed(); //it will hide the cart if is the view from mobile
              //                                alert("dont have address");
              setTimeout(function() {
                $("#address-list").fadeOut(500);
                $("#add-address").fadeIn(500);
              }, 500);
              //                                alert("Please a delivery address!");
              //                                $scope.ChangePage('myaddress');
            } else {
              setTimeout(function() {
                $scope.ChangePage('checkout-details');
                mobieProceed(); //it will hide the cart if is the view from mobile
              }, 0);
            }
          }
          hideLoader();
        }
      }, function(reason) {
        console.log(reason);
        hideLoader();
      });
    } else {
      swal("Connection Error", "there is problem in your internet connection!", "error");
      hideLoader();
    }
  }, 0);
} else {
  mobieProceed(); //it will hide the cart if is the view from mobile
  $scope.ChangePage("login");
  pageToRedirect = "checkout-details";
  hideLoader();
}
};
$scope.subTotalAmount = 0;
$scope.isBillGreaterThanMinimumAmount = false;

function addDeliveryAmount() {
if(DeliveryChargesAdd) {
  $scope.TotalAmount = getTotalBill($rootScope.Products);
  if($scope.TotalAmount >= $scope.MinOrderAmount) {
    $scope.IsPreccedButtonDisable = false;
    $scope.hideText = true;
    //                alert($scope.DeliveryCharges);
    $scope.TotalAmount = $scope.DeliveryCharges + getTotalBill($rootScope.Products);
  } else {
    $scope.IsPreccedButtonDisable = true;
    $scope.hideText = false;
    $scope.TotalAmount = getTotalBill($rootScope.Products);
  }
  $scope.minimumorderamountleft = $scope.MinOrderAmount - $scope.TotalAmount;
  if($scope.minimumorderamountleft < 0) {
    $scope.isBillGreaterThanMinimumAmount = false;
  } else {
    $scope.isBillGreaterThanMinimumAmount = true;
  }
} else {
  $scope.isBillGreaterThanMinimumAmount = false;
  $scope.hideText = false;
  //                $scope.IsPreccedButtonDisable = false;
  $scope.TotalAmount = getTotalBill($rootScope.Products);
}
$scope.isCartEmpty = isCartEmpty($rootScope.Products);
if($scope.isCartEmpty) {
  $scope.IsPreccedButtonDisable = true;
} else {
  $scope.IsPreccedButtonDisable = false;
}
$scope.subTotalAmount = getTotalBill($rootScope.Products);
if($rootScope.Products.length == 0) {
  $scope.isBillGreaterThanMinimumAmount = false;
}

$scope.cartProducts['numberOfProducts'] = getNumberOfProductsInCart($rootScope.Products);
$scope.cartProducts['totalAmount'] = getTotalBill($rootScope.Products);

$scope.promoModule();
$scope.orderTypeDiscount();
};

$scope.orderTypeDiscount = () => {
  if (!$scope.itemsDiscount.length) { return; }
  const index = $scope.itemsDiscount.findIndex(x => x.orderType == $scope.OrderTypeVar);
  if (index === -1) {
    $scope.discountedPrice = 0;
    return;
  }
  const discount = $scope.itemsDiscount[index];

  $scope.subTotalAmount = getTotalBill($rootScope.Products);
  let minOrder = 0;
  if (discount.maxTotal === -1) {
    minOrder = $scope.MinOrderAmount;
  } else {
    minOrder = discount.maxTotal;
  }
  if ($scope.subTotalAmount >= minOrder && $scope.OrderTypeVar == "Delivery") {
    if (discount.discountType == 'percentage') {
      $scope.discountedPrice = calculateTotalAmount($scope.subTotalAmount, discount.maxDiscount);
      $scope.TotalAmount -= $scope.discountedPrice;
    } else {
      $scope.discountedPrice = discount.maxDiscount;
      $scope.TotalAmount -= discount.maxDiscount;
    }
  } 
  else if ($scope.OrderTypeVar == "Collection") {
    if (discount.discountType == 'percentage') {
      $scope.discountedPrice = calculateTotalAmount($scope.subTotalAmount, discount.maxDiscount);
      $scope.TotalAmount -= $scope.discountedPrice;
    } else {
      $scope.discountedPrice = discount.maxDiscount;
      $scope.TotalAmount -= discount.maxDiscount;
    }
  } 
  else {
    $scope.discountedPrice = 0;
  }

}

$scope.viewMobileCart = function() {
  $("#mCartbar").addClass("show");
  if (detectmob()) { return; }
  if ($scope.cartProducts.numberOfProducts > 0) {
    $scope.ChangePage('main');
  }
};

function mobieProceed() {
  if(detectmob()) {
    setTimeout(function() {
      $("#mCartbar").removeClass("show");
      //        alert("im in");
      //        angular.element(document.querySelector("#cartbar")).removeClass("show-right");
            }, 1000);
          $(document).ready(function() {
  
    });
  }
};

$scope.isMobileView = () => {
  return detectmob();
}

$scope.isRestOpen = () => {
  var isOpen = false;
  if ($scope.isCustomOpeningTime) {
    isOpen = $scope.isCustomOpen();
  } else {
    isOpen = $scope.RestaurtantTime['restOn'] && $scope.RestaurtantTime.openTime !== $scope.RestaurtantTime.closeTime;
  }
  if (
    !isOpen &&
    $scope.isPreOrdering &&
    $scope.preTimings.currentTime &&
    $scope.preTimings.minutes !== '0' &&
    $scope.preTimings.minutes
    ) {
      return true;
  }
  return isOpen;
}

$scope.labelCreationCtrl = () => {
  var isOpen = false;
  var timeLabel = '';
  if ($scope.isCustomOpeningTime) {
    isOpen = !$scope.customOpeningTime[moment().format('dddd')].length;
    $scope.customOpeningTime[moment().format('dddd')].forEach((time, index) => {
      if (index === 0) {
        timeLabel += 'Opening time ';
      }
      if (index > 0) {
        timeLabel += `, `;
      }
      timeLabel += `${time.openTime} - ${time.closeTime}`
    });
  } else {
    isOpen = ($scope.RestaurtantTime.openTime !== $scope.RestaurtantTime.closeTime);
  }
  return $scope.isCustomOpeningTime && !timeLabel ? '' : isOpen && !timeLabel ? "Opening time " + $scope.RestaurtantTime.openTime  + " to " + $scope.RestaurtantTime.closeTime : timeLabel ? timeLabel : '';
}

$scope.openRestCloseModal = () => {  
  swal(
    "We Are Closed.",
    $scope.labelCreationCtrl(),
    "error"
  );
}

//Functions to test
$scope.openCart = function() {
  $scope.isCartEmpty = isCartEmpty($rootScope.Products);
  $scope.TotalProductsAmount = getTotalAmount($rootScope.Products);
  getRestBusiness();
  showLoader();
  if($scope.isRestOpen()) {
    //if order type is empty will not var proceed
    if($scope.OrderTypeVar != "") {
      //if total amount is less than or eqaul to zero
      if($scope.TotalProductsAmount > 0) {
        var checkTotamBill = getTotalBill($rootScope.Products);
        //this condition is checking the order amount is greater or eqaul to the minimum order amount
        if(DeliveryChargesAdd) {
          if(checkTotamBill >= $scope.MinOrderAmount) {
            $scope.IsPreccedButtonDisable = false;
            $scope.hideText = true;
            hideLoader();
            $scope.checkoutProcess();
          } else {
            hideLoader();
            swal("","Your cart total is less than minimum amount","warning");
            $scope.IsPreccedButtonDisable = true;
            $scope.hideText = false;
          }
        } else {
          hideLoader();
          $scope.checkoutProcess();
        }
      } else {
        hideLoader();
      }
    } else {
      hideLoader();
      swal("","Please Select Order Type","warning");
    }
  } else {
    $scope.openRestCloseModal();
    hideLoader();
    swal(
      $scope.RestaurtantTime.openTime !== $scope.RestaurtantTime.closeTime ? "We are closed" : "We are closed today.",
      $scope.labelCreationCtrl(),
      "error"
    ).then(() => {
      if (!$scope.isPreOrdering) { return; }
      if(!DeliveryChargesAdd) { 
        $scope.openPreOrderPopup();
        return;
      }
      var checkTotamBill = getTotalBill($rootScope.Products);
      if(checkTotamBill >= $scope.MinOrderAmount) {
        $scope.openPreOrderPopup();
      } else {
        hideLoader();
        swal("","Your cart total is less than minimum amount","warning");
        $scope.IsPreccedButtonDisable = true;
        $scope.hideText = false;
      }
    });
    
  }
  
};

$scope.isRestClose = (data) => {
  return data.openTime.replace(/\s/g, '') === data.closeTime.replace(/\s/g, '');
}

//end of opencart function
$scope.logout = function() {
  swal({
    title: "Logout?",
    text: "Do you really want to logout?",
    icon: "warning",
    buttons: true,
    dangerMode: true,
  }).then(function(willDelete) {
    if(willDelete) {
      showLoader();
      localStorage.removeItem('login');
      $scope.firstName = "";
      $scope.number = "";
      $scope.password = "";
      $scope.userEmail = "";
      IsUserLogged = false;
      $scope.ChangePage("main");
      setTimeout(function() {
        hideLoader();
        swal("You have loggod off successfully!", {
          icon: "success",
        });
      }, 500);
    }
  });
}; 


//Payment Form
$scope.paymentmethod = "Cash";

$scope.paymentMethod = (method) => {
  $scope.paymentmethod = method;
  method == 'Card' ? $scope.pmethod = "card": $scope.pmethod = "cash"; 
};

$scope.isLoyaltyProgramEnabled = async () => {
  const loyalty = await myMethods.checkLoyaltyStatus($scope.CompId);
  if (loyalty.data[0].Status === '200') {
    $scope.isLoyalty = true;
    $scope.loyaltyPerDollar = Number(loyalty.data[0].Pointperdollar);
    $scope.loyaltyPerPurchase = Number(loyalty.data[0].Pointperpurchase);
  } else {
    localStorage.removeItem('voucher');
  }
}

$scope.getLoyaltyRules = async () => {
  const rules = await myMethods.getLoyaltyRules($scope.CompId);
  $scope.loyaltyRules = rules.data;
}

$scope.calculateLoyaltyPointts = (amount) => {
  return ((amount * $scope.loyaltyPerDollar) + $scope.loyaltyPerPurchase).toFixed(0);
}

$scope.checkLoginStatus = () => {
  const user = JSON.parse(localStorage.getItem('login'));
  if (user) {
    return user;
  } else {
    return false;
  }
}

$scope.getRewardPoints = async () => {
  const user = $scope.checkLoginStatus();
  if (!user) {
    return;
  }
  const points = await myMethods.getLoyaltyPoints($scope.CompId, user.Customerid);
  if (points.status === 200) {
    $scope.availablePoints = points.data[0].LoyaltyPoints;
  }
}

$scope.getAvailableVoucher = async () => {
  const user = $scope.checkLoginStatus();
  if (!user) {
    return;
  }
  const vouchers = await myMethods.getVouchers($scope.CompId, user.Customerid);

  if (vouchers.data[0].Status == '200') {
    $scope.availableVouchers = vouchers.data;
  }
}

$scope.getOrderTypes

$scope.redeemNow = async (rule) => {
  const user = JSON.parse(localStorage.getItem('login'))[0];
  if (Number($scope.availablePoints) < Number(rule.Poinsttoredeem || !user.Customerid)) {
    return;
  }

  var date = new Date();
  var currnetDateTime = date.getFullYear() + "-" + checkTime((date.getMonth() + 1)) + "-" + checkTime(date.getDate()) + " " + date.toLocaleTimeString();

  const redeem = await myMethods.redeemVoucher($scope.CompId, user.Customerid, rule.Ruleid, currnetDateTime);

  if (redeem.status == 200) {
    // $scope.getRewardPoints();
    setTimeout(function() {
      $scope.getRewardPoints()
    }, 100);
    $scope.availableVouchers = redeem.data;
    swal("Voucher has been created!", "Thank you", "success");
  }
}

$scope.selectedVoucher = 0;
$scope.useVoucher = (voucher) => {
  localStorage.setItem('voucher', JSON.stringify(voucher));
  $scope.selectedVoucher = voucher;
  $scope.getDiscountPrice();
  $scope.ChangeRoute();
}

$scope.changeVoucher = (voucher) => {
  if (!voucher) {
    return;
  }
  if (typeof voucher == 'string') {
    voucher = JSON.parse(voucher);
  }
  console.log('voucher', voucher);
  localStorage.setItem('voucher', JSON.stringify(voucher));
  $scope.selectedVoucher = voucher;

  $scope.getDiscountPrice();
}

$scope.getDiscountPrice = () => {
  const voucher = JSON.parse(localStorage.getItem('voucher'));
  if (!voucher) {
    return false;
  }

  if (voucher.VoucherType == 'Percentage') {
    $scope.discountedPrice = $scope.cartProducts.totalAmount * (Number(voucher.VoucherValue) / 100);
  } else {
    $scope.discountedPrice = Number(voucher.VoucherValue);
  }
  console.log($scope.discountedPrice)
}

$scope.getVoucherName = () => {
  const voucher = JSON.parse(localStorage.getItem('voucher'));
  if (!voucher) {
    return 0;
  }

  if (voucher.VoucherType == 'Percentage') {
    voucher.name = voucher.VoucherValue + '% OFF';
  } else {
    voucher.name = '£' + voucher.VoucherValue + ' OFF';
  }
  // return voucher;
  $scope.selectedVoucher = voucher;
}

$scope.getDiscount = () => {
  $scope.TotalAmount -= $scope.discountedPrice
}

$scope.removeVoucher = () => {
  localStorage.removeItem('voucher');
  $scope.TotalAmount += $scope.discountedPrice;
  $scope.discountedPrice = 0;
  $scope.selectedVoucher = 0;
}

$scope.deleteEmptyAddres = () => {
  const deleteIndex = $scope.myAddresses.findIndex(x => x.custPostalCode === '');
  if (deleteIndex !== -1) {
    $scope.myAddresses.splice(deleteIndex, 1);
  }

  const main = $scope.myAddresses.filter(x => x.isDefault === true);
  if (deliveryAddressId) {
    return;
  }
  if (main.length) {
    deliveryAddressId = main[0].addressId;
  }
}

$scope.checkPostCode = async () => {
  if ($scope.OrderTypeVar != 'Delivery') {
    return true;
  }
  $scope.deleteEmptyAddres();
  const indexAddress =  $scope.myAddresses.findIndex(x => x.addressId === deliveryAddressId);
  if (indexAddress !== -1 || $scope.isGuest) {
    var selectedPostalCode = '';
    if (!$scope.isGuest) {
      selectedPostalCode = $scope.myAddresses[indexAddress].custPostalCode;
    } else {
      selectedPostalCode = $scope.guestAddrDetails.Postalcode;//$scope.myAddresses[indexAddress].custPostalCode;
    }
    const offreredCodes = await myMethods.getOfferedPostCode($scope.CompId);
    if (!offreredCodes.data[0].Postcode) {
      return true;
    }
    const arrayPostcodes =  offreredCodes.data[0].Postcode.split(',');
    const indexPostcode = arrayPostcodes.findIndex(x => {
      x = x.replace(/\s/g, '').toLowerCase();
      const regex = new RegExp(x, 'g');
      
      const postalCode = selectedPostalCode.replace(/\s/g, '').toLowerCase();
      if (x === postalCode) {
        return true;
      } else if (postalCode.match(regex)) {
        return true;
      }
    });
    if (indexPostcode !== -1) {
      return true;
    } else {
      return false;
    }
  }
}


$scope.completeOrder = async (customerDetailsForm, customerAddrForm) => {


  if ($scope.isGuest) {
    // setTimeout(() => {
    const isUserDetails = $scope.validateUserDetails();
    var isUserAddress = $scope.validateAddress();

    isUserAddress = $scope.OrderTypeVar !== 'Delivery' ? true : isUserAddress;

    if (!isUserDetails || !isUserAddress) {
      hideLoader();
      swal("Missing", "Please fill all the required fields", "error");
      return;
    }
    // }, 0)
  } else {
    if (!IsUserLogged) {
      $scope.ChangePage("main");
      return;
     }
  }
  $scope.deleteEmptyAddres();
  if (!deliveryAddressId && $scope.OrderTypeVar === 'Delivery' && !$scope.isGuestModule) {    
    swal("Please Select an address", {
      icon: "error",
    });
    return;
  }
  const checkPostCode = await $scope.checkPostCode();
  if (!checkPostCode) {    
    swal("We do not deliver in this address", {
      icon: "error",
    });
    return;
  }

  var totalBill = getTotalBill($rootScope.Products);
  if (!(totalBill >= $scope.MinOrderAmount) && $scope.OrderTypeVar === 'Delivery') {
    hideLoader();
    swal("Empty Cart","Your cart is empty, add some items first","warning");
      setTimeout(function() {
        $scope.ChangePage("main");
//      getProducts();
      }, 0);
    return;
  }

  showLoader();
  getRestBusiness();
  setTimeout(function() {
    if($scope.isRestOpen()) {
      if(DeliveryChargesAdd) {
        if(deliveryAddressId != 0) {
          $scope.invoiceNumber = getInvoiceID();
          $scope.sendOrder();
        } else {
          deliveryAddressId = defualtDeliveryAddressId($scope.myAddresses);
          if(deliveryAddressId == 0 && !$scope.isGuest) {
            setTimeout(function() {
              $("#address-list").fadeOut(500);
              $("#add-address").fadeIn(500);
            }, 500);
            swal("Delivery Address", "Please select/add an address", "warning");
            hideLoader();
          } else {
            $scope.invoiceNumber = getInvoiceID();
            $scope.sendOrder();
          }
        }
      } else {
        $scope.invoiceNumber = getInvoiceID();
        $scope.sendOrder();
      }
    } else {
      $scope.openRestCloseModal();
      hideLoader();
    }
  }, 0);
};

$scope.paymentError = "";
$scope.stripeElemets = null;
$scope.stripeVar = null;
$scope.stripeCard = null;
$scope.stripeCardNo = null;
$scope.stripeCardExp = null;
$scope.stripeCardCvc = null;
$scope.setStripCardForm = () => {
  if (!public_key) { return; }
  $scope.stripeVar = Stripe(public_key);
  $scope.stripeElemets = $scope.stripeVar.elements();

  var style = {
    base: {
      color: '#32325d',
      fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
      fontSmoothing: 'antialiased',
      fontSize: '17px',
      lineHeight: '40px',
      '::placeholder': {
        color: '#aab7c4'
      }
    },
    invalid: {
      color: '#fa755a',
      iconColor: '#fa755a'
    }
  };
  
  // Create an instance of the card Element.
  // $scope.stripeCard = $scope.stripeElemets.create('card', {style: style});

  $scope.stripeCardNo = $scope.stripeElemets.create('cardNumber', { showIcon: true, style: style});

  $scope.stripeCardNo.mount('#stripe-card-no');

  $scope.stripeCardExp = $scope.stripeElemets.create('cardExpiry', {style: style});

  $scope.stripeCardExp.mount('#stripe-card-expiry');

  $scope.stripeCardCvc = $scope.stripeElemets.create('cardCvc', {style: style});

  $scope.stripeCardCvc.mount('#stripe-card-cvc');
  
  // Add an instance of the card Element into the `card-element` <div>.
  // $scope.stripeCard.mount('#stripe-card-element');

}

$scope.mountCardForm = () => {
  $scope.stripeCard.mount('#stripe-card-element');
}

//Validation of Stripe Payment
$scope.addCardDetails = async function(customerDetailsForm, customerAddrForm) {
  
  showLoader();
  // $scope.disablePyament = true;
  $scope.paymentError = '';
  if ($scope.isGuest) {
     // setTimeout(() => {
     const isUserDetails = $scope.validateUserDetails();
     var isUserAddress = $scope.validateAddress();

     isUserAddress = $scope.OrderTypeVar !== 'Delivery' ? true : isUserAddress;
     if (!isUserDetails || !isUserAddress) {
       hideLoader();
       swal("Missing", "Some Details Missing", "error");
       return;
     }
     // }, 0)
   } else {
     if (!IsUserLogged) {
      $scope.ChangePage("main");
      return;
     }
   }
  $scope.deleteEmptyAddres();
  if (!deliveryAddressId && $scope.OrderTypeVar === 'Delivery'  && !$scope.isGuestModule) {    
    $scope.disablePyament = false;
    hideLoader();
    swal("Please Select an address", {
      icon: "error",
    });
    return;
  }
  const checkPostCode = await $scope.checkPostCode();
  if (!checkPostCode) {
    hideLoader();
    swal("We do not deliver in this address", {
      icon: "error",
    });
    $scope.disablePyament = false;
    return;
  }
  if($rootScope.Products.length == 0){
    $scope.disablePyament = false;
    hideLoader();
    swal("Empty Cart","Your cart is empty, add some items first","warning");
     setTimeout(function() {
       $scope.ChangePage("main");
//      getProducts();
     }, 0);
     return;
   }

   var totalBill = getTotalBill($rootScope.Products);
   if (!(totalBill >= $scope.MinOrderAmount) && $scope.OrderTypeVar === 'Delivery') {
     hideLoader();
     swal("Empty Cart","Your cart is empty, add some items first","warning");
       setTimeout(function() {
         $scope.ChangePage("main");
 //      getProducts();
       }, 0);
     return;
   }
   
  getRestBusiness();
  // setTimeout(function(){
    if($scope.isRestOpen()){
      if(isNull(public_key)){
        hideLoader();
        $scope.disablePyament = false;
        $scope.paymentError = "Unable to process this payment, please try again or use alternative method.";
        return;
      }
       else {
        // showLoader();
        // $scope.paymentError = "";
        // Stripe.setPublishableKey(public_key);
        // Stripe.card.createToken({
        //   number: cardNumber,
        //   cvc: ccv,
        //   exp_month: month,
        //   exp_year: year,
        //   address_zip: postalcode
        // }, stripeResponseHandler);
      }
      showLoader();
      $scope.paymentError = "";
      $scope.disablePyament = true;
      var totalAmount = Number((Number($scope.TotalAmount.toFixed(2)) * 100).toFixed(2));
      var paymentName = $scope.number + ' / ' + $scope.userEmail;
      var userObj = {
        phone: $scope.number,
        email: $scope.userEmail
      }
      if ($scope.isGuest) {
        paymentName = $scope.guestDetails.Phoneno + ' / ' + $scope.guestDetails.Email;
        userObj = {
          phone: $scope.guestDetails.Phoneno,
          email: $scope.guestDetails.Email
        }
      }
      myMethods.makeChargeIntents(Company_ID, totalAmount, userObj.phone, userObj.email).then(result => {
        if (result.data[0].Status != 200) {
          $timeout(function() {
            $scope.paymentError =result.data[0].Msg;
            $scope.disablePyament = false;
            hideLoader();
          });
          return;
        }
        $scope.stripeVar.confirmCardPayment(
          result.data[0].Msg,
          {
            payment_method: {
              card: $scope.stripeCardNo,
              billing_details: {
                name: paymentName,
              },
              metadata: {
                platform: 'Web Online Ordering.'
              }
            }
          }
        ).then(function(result) {
          stripeResponseHandler(null, result);
        }).catch(err => {
          $scope.disablePyament = false;
          swal("Payment Failed", JSON.stringify(err), "error");
          hideLoader();
        });
      }).catch(err => {
        $scope.disablePyament = false;
        swal("Payment Failed", JSON.stringify(err), "error");
        hideLoader();
      });
      // fetch("http://oows2.jempos.com/service.asmx/MakeCharge_intents", {
      //   method: "POST",
      //   headers: {
      //     "Content-Type": "application/json"
      //   },
      //   body: JSON.stringify(orderData)
      // }).then((result) => {
      //   const kk = result.json();
      //   debugger;
      //   return result.json();
      // }).then((data) => {
      //   debugger;
      //   $scope.stripeVar.confirmCardPayment(
      //     data.clientSecret,
      //     {
      //       payment_method: {card: $scope.stripeCardNo}
      //     }
      //   ).then(function(result) {
      //     debugger;
      //     stripeResponseHandler(null, result);
      //   });
      // })
      
    }else{
      $scope.disablePyament = false;
      $scope.openRestCloseModal();
      hideLoader();
    }
  // },500);
};
  
//This function will handle the validtion of card information on front-end
function stripeResponseHandler(status, response) {
  if(response.error) {
    $timeout(function() {
      $scope.paymentError = response.error.message;
      $scope.disablePyament = false;
      hideLoader();
    });
  } else {
    var token = response.paymentIntent;
    var user_email = $scope.userEmail;
    var isValidation = false;
    if(DeliveryChargesAdd) {
      if(deliveryAddressId != 0 || $scope.isGuest) {
        isValidation = true;
      }
    } else {
      isValidation = true;
    }
    if(isValidation) {
      $scope.invoiceNumber = getInvoiceID();
      var formData = {
        compID: $scope.CompId,
        stripeEmail: user_email,
        stripeToken: token.id,
        totalAmount: $scope.TotalAmount,
        orderNumber: $scope.invoiceNumber,
        customerNumber: $scope.number
      };
      // debugger;
      $scope.sendOrder();
      // $.when(ServerServices.MakeCharge(formData)).then(function(data) {
      //   $timeout(function() {
      //     if(data.status == 'success') {
      //       var Response = data.data.data;
      //       if(Response[0].response_Code == 1) {
      //         $scope.sendOrder();
      //       } else {
      //         $scope.disablePyament = false;
      //         swal("Payment Failed", Response[0].response_message, "error");
      //         hideLoader();
      //       }
      //     } else if(data.status == 'fail') {
      //       $scope.disablePyament = false;
      //       swal("Payment Failed", Response[0].response_message, "error");
      //       hideLoader();
      //     }
      //   });
      // }, function(data) {
      //   console.log(data);
      //   $scope.disablePyament = false;
      //   console.log('Failed to complete payment process');
      //   hideLoader();
      // });
    } else {
      $scope.disablePyament = false;
      swal("Delivery Address", "Please select/add an address", "warning");
      hideLoader();
    }
  }
};

$scope.modifierQuantity = (arr, item, index) => {
  arr.splice(index, 1);
  var cacheItem = {...item};
  cacheItem.quantity = 1;
  const parentIndex = arr.findIndex(x => x.MenuItemId === item.parentMenuItemID);
  let divide = 1;
  if (parentIndex !== -1) {
    divide = arr[parentIndex].quantity;
    cacheItem.quantity = divide;
  }
  const childIndex = arr.findIndex(x => x.MenuItemId === item.MenuItemId && x.quantity === 1);
  if (childIndex !== -1) { return arr; }
  for (let arrIndex = 0; arrIndex < item.quantity / divide; arrIndex++) {
    arr.splice(index, 0, cacheItem);
  }
  return arr;
}

$scope.changeQuantityToArray = (arr) => {
  var cacheArray = [...arr];
  for (let arrIndex = 0; arrIndex < cacheArray.length; arrIndex++) {
    if (!cacheArray[arrIndex].parentMenuItemID && cacheArray[arrIndex].quantity > 1) {
      continue;
    }
    if (cacheArray[arrIndex].parentMenuItemID && cacheArray[arrIndex].quantity > 1) {
      cacheArray = $scope.modifierQuantity(cacheArray, cacheArray[arrIndex], arrIndex);
    }
  }
  return cacheArray;
}


$scope.validateAddress = () => {
  if (
    !$scope.guestAddrDetails.Houseno ||
    !$scope.guestAddrDetails.Streetno ||
    !$scope.guestAddrDetails.City ||
    !$scope.guestAddrDetails.Postalcode
  ) {
    return false;
  }
  return true;
}

$scope.validateUserDetails = () => {
  if (
    !$scope.guestDetails.Firstname ||
    !$scope.guestDetails.Email ||
    !$scope.guestDetails.Phoneno
  ) {
    return false;
  }
  return true;
}

//To send the order to the server
$scope.sendOrder = function() {
    if($rootScope.Products.length == 0){
     hideLoader();
     swal("Empty Cart","Your cart is empty, add some items first","warning");
      setTimeout(function() {
        $scope.ChangePage("main");
 //      getProducts();
       }, 0);
      return;
    }
      var orderSendBy = $scope.firstName;
      var deliveryCharges = $scope.DeliveryCharges;
      var orderReadyTime = $scope.DeliveryTime;
      var companyId = $scope.CompId;
      var customerId = $scope.number;
      var voucherdiscount = -($scope.discountedPrice ? $scope.discountedPrice : $scope.VoucherDiscount); //the discount amount 
      var totalCartBill = $scope.TotalAmount;
      var vatAmount = $scope.OnlineTax; //the amount after calucating the vat according to the bill
      var vattype = $scope.VatType; //vat type can be inclusive or Exclusive
      var vatPercentage = $scope.S_Vat; //Vat in percentage
      var ordertype = $scope.OrderTypeVar; //Delivery or Collection
      var Payment_Recived = 'Not-Received';
      var paymentmethod = $scope.paymentmethod;
      var PrePayment = 0;
      if(paymentmethod == 'Cash') {
        $scope.paymenttype = "Cash Payment";
        Payment_Recived = 'Not-Received'
        PrePayment = 0;
      } else if(paymentmethod == 'Card') {
        $scope.paymenttype = "Card Payment";
        Payment_Recived = 'Received'
        PrePayment = 1;
      }
      //check the order type
      var tableid = "";
      if(ordertype == "Delivery") {
        tableid = "temp-D-1";
      } else if (ordertype == 'TableOrder') {
        $scope.getOrderType();
        tableid = "temp-T-" + $scope.orderTypeData.table; // temp-T-tableNo.
      } else {
        tableid = "temp-C-1";
      }
      var specicalNotes = [];
      var test = JSON.stringify($scope.specialNotes);
      specicalNotes = JSON.parse(test);
      //alert("payment method " + paymentmethod);
      var date = new Date();
      var date1 = new Date();
      var curr_year = date1.getFullYear();
      var curr_date = checkTime(date1.getDate());
      var curr_month = checkTime((date1.getMonth() + 1));
      date1.setMinutes(date.getMinutes() + $scope.DeliveryTime);
      var DeliveryTime = curr_year + "-" + curr_month + "-" + curr_date + " " + date1.toLocaleTimeString();
 //     $scope.DeliveryTime
      //date.setMinutes(date.getMinutes() + $scope.DeliveryTime); //this line will add time in delivery time
      var OrderDateAndTime = date.getFullYear() + "-" + checkTime((date.getMonth() + 1)) + "-" + checkTime(date.getDate()) + " " + date.toLocaleTimeString();
     // var invoice = "Web" + companyId + ($filter('date')(new Date(), 'MM')) + ($filter('date')(new Date(), 'dd')) + ($filter('date')(new Date(), 'mm')) + ($filter('date')(new Date(), 'ss')) + (Math.floor((Math.random() * 999) + 999));
      var invoice = $scope.invoiceNumber;

      const isToday = moment().format('YYYY-MM-DD') == $scope.preTimings.currentDate;
      if ($scope.isPreOrdering && $scope.preTimings.currentTime) {
        if ($scope.preTimings.currentTime.length > 2) {
          $scope.preTimings.currentTime = moment($scope.preTimings.currentTime, 'HH:mm');
        }
        $scope.preTimings.currentTime = moment($scope.preTimings.currentTime).format('HH:mm');
        let time = moment($scope.preTimings.currentTime, 'HH:mm').add($scope.preTimings.minutes, 'minutes').format('HH:mm:ss');
        if (time == 'Invalid date') {
          time = moment($scope.preTimings.currentTime, 'HH:mm').format('HH:mm:ss');
        }

        DeliveryTime = `${$scope.preTimings.currentDate} ${time}`;
        const diff = moment().diff(DeliveryTime, 'minutes');
        if (diff > 1 || time == 'Invalid date' || DeliveryTime.includes('Invalid date')) {
          swal("Invalid Time", "there is problem with your time!", "error");
          hideLoader();
          return;
        }

        if(ordertype == "Delivery") {
          tableid = "pre-D-1";
        } else if (ordertype == 'TableOrder') {
          $scope.getOrderType();
          tableid = "pre-T-" + $scope.orderTypeData.table; // pre-T-tableNo.
        } else {
          tableid = "pre-C-1";
        }
      }

      if (!isToday && !($scope.isPreOrdering && $scope.preTimings.currentTime)) {
        swal("Invalid Time", "Please add hours and minutes", "error");
        hideLoader();
        return;
      }

     var AddToReceiveOrder = [];
     var data = {
        Recvorder_datetime: OrderDateAndTime,
        CompID: companyId,
        Customer_ID: customerId,
        Recvorder_status: 'pending',
        Recvorder_comments: specicalNotes.text,
  //       Recvorder_Totaldiscount: voucherdiscount,
        Recvorder_Totaldiscount: 0,
        Recvorder_promotioncode: Coupon_Code,
        Recvorder_Totalamount: totalCartBill,
        Recvorder_Paymentmethod: paymentmethod,
        Recvorder_Paymentrecvstatus: Payment_Recived,
        Recvorder_VoucherNo: $scope.getVoucherName()?$scope.getVoucherName().VoucherCode:0,
        Recvorder_ReceivedFrom: 'JemWeb',
        Recvorder_Tableid: tableid, //'temp-C-1',
        Recvorder_InvoiceNo: invoice,
        VATAmount: vatAmount,
        Recvorder_VATType: vattype,
        Recvorder_VocherDiscountAmount: voucherdiscount,
        Recvorder_OrderNatureType: ordertype,
        Recvorder_OrderSendBy: orderSendBy,
        Recvorder_PaymentBy: '',
        Recvorder_Deliverycharges: ordertype == 'Delivery' ? deliveryCharges : 0,
        OrderReadyMins: orderReadyTime,
        Recvorder_Totaldiscountpercentage: 0,

  //       Recvorder_Totaldiscountpercentage: voucherTotalDiscount,
        Recvorder_VATpercentage: vatPercentage,
        PrePayment: PrePayment,
        Recvorder_ExpectedDeliveryTime: DeliveryTime,
        DeliveryAddressID: deliveryAddressId
      }

      if ($scope.isLoyalty) {
        data.loyaltyPoints = $scope.calculateLoyaltyPointts(totalCartBill);
      } else {
        data.loyaltyPoints = 0;
      }

      AddToReceiveOrder.push(data);
      //alert("order is sending..");
 
      const details = $scope.changeQuantityToArray($rootScope.Products);
      var url = API_Services + "Service.asmx/AddReceiveOrder2";
      var absoluteData = {
        RecvOrder: JSON.stringify(AddToReceiveOrder),
        RecvOrderDetail: JSON.stringify(details)
      }
      if ($scope.isGuest) {
        url = API_Services + "Service.asmx/AddReceiveOrder3";
        var userDetails = { ...$scope.guestDetails }
        var userAddr = { ...$scope.guestAddrDetails }
        userAddr.CompID = $scope.CompId
        absoluteData.CustomerData = JSON.stringify([{
          ...userDetails, ...userAddr
        }]);
      }

      $.ajax({
       method: 'POST',
       url: url,// API_Services + "Service.asmx/AddReceiveOrder2",
       //type: "GET",
       // contentType: "application/json; charset=utf-8",
      //  data: {
      //    RecvOrder: JSON.stringify(AddToReceiveOrder),
      //    RecvOrderDetail: JSON.stringify(details)
      //  },
      data: { ...absoluteData },
       beforeSend: function(xhr) {
         if(!checkNetConnection()) {
           xhr.abort();
           swal("Connection Error", "there is problem in your internet connection!", "error");
           hideLoader();
         }
       },
       complete: function (xhr, status) {
         console.log(xhr.status);
         if(xhr.status == 200) {
              if ($scope.discountedPrice) {
                const voucher = JSON.parse(localStorage.getItem('voucher'));
                const user = JSON.parse(localStorage.getItem('login'))[0];
                if (user.Customerid && voucher) {
                  localStorage.removeItem('voucher');
                  myMethods.changeVoucherStatus($scope.CompId, user.Customerid, voucher.VoucherID).then(response => {
                    $scope.discountedPrice = 0;
                    $scope.getAvailableVoucher();
                  });
                }
              }
              swal("Your order has been placed!", "Check your order status", "success");
              //reset variables
              $rootScope.Products.length = 0;
              $scope.TotalAmount = 0;
              $scope.TotalProductsAmount = 0;
              $scope.OnlineTax = 0;
              $scope.VoucherDiscount = 0;
              $scope.DeliveryCharges = 0;
              $scope.specialNotes = {
                text: ""
              };
              $scope.disablePyament = false;
              $scope.isGuest = false;
              // if ($scope.isGuest) {
                $scope.guestDetails = {
                  Firstname: '',
                  Lastname: '',
                  Email: '',
                  Phoneno: ''
                };
                $scope.guestAddrDetails = {
                  Houseno: '',
                  Streetno: '',
                  City: '',
                  Postalcode: '',
                  address: ''
                }
              // }
              //bucket clear
              $scope.cartProducts = {
               numberOfProducts: 0,
               totalAmount: 0.00
             };
             //clearing invoice number
             $scope.invoiceNumber = "";
             //  $scope.cartProducts['numberOfProducts'] = '';
             //  $scope.cartProducts['totalAmount'] = '';
              $scope.disableCouponButton = false;
 
              if ($scope.isPreOrdering) {
                $scope.preTimings.currentTime = 0;
                $scope.preTimings.currentDate = moment().format('YYYY-MM-DD');
                $scope.preOrderControl(true, true);
              }
              //clear order type
              $scope.OrderTypeVar = ordertype;
              $scope.ordertype = ordertype;
              DeliveryChargesAdd = true;
              $scope.hideText = false;
              localStorage.setItem("ordertype", ordertype);
              //Payment Form
              $scope.paymentmethod = "Cash";
              $scope.pmethod = "cash";
              //////////
              localStorage.setItem("cart", JSON.stringify($rootScope.Products));
              $scope.IsPreccedButtonDisable = true;
              $scope.cacheCart[ordertype] = [];
              localStorage.setItem('cacheCart', JSON.stringify($scope.cacheCart));
              $scope.isCartEmpty = isCartEmpty($rootScope.Products);
              setTimeout(function() {
                if ($scope.isGuest) {
                  $scope.isGuest = false;
                  $scope.ChangePage("home");
                } else {
                  $scope.getRecentOrders();
                }
                //$scope.ChangePage("main");
                //hideLoader();
              }, 0);
         }
       },
       success: function(result) {
         console.log("Success");
         console.log(result);
         hideLoader();
       },
       error: function(xhr, status, error) {
         console.log(xhr.responseText);
         hideLoader();
       }
     });
 
      
     //  if(checkNetConnection()) {
     //    myMethods.SendAnOrderToServer(AddToReceiveOrder, $rootScope.Products).then(function(response) {
     //      if(response.status == 200) {
     //        //alert("Your order has been placed!");
     //        swal("Your order has been placed!", "Check your order status", "success");
     //        //console.log(response);
     //        //reset variables
     //        $rootScope.Products.length = 0;
     //        $scope.TotalAmount = 0;
     //        $scope.TotalProductsAmount = 0;
     //        $scope.OnlineTax = 0;
     //        //                    $scope.specialNotes = "";
     //        $scope.specialNotes = {
     //          text: ""
     //        };
     //        //clear order type
     //        $scope.OrderTypeVar = "Delivery";
     //        $scope.ordertype = "Delivery";
     //        DeliveryChargesAdd = true;
     //        $scope.hideText = false;
     //        localStorage.setItem("ordertype", "Delivery");
     //        //////////
     //        localStorage.setItem("cart", JSON.stringify($rootScope.Products));
     //        $scope.isCartEmpty = isCartEmpty($rootScope.Products);
     //        setTimeout(function() {
     //          $scope.getRecentOrders();
     //          //$scope.ChangePage("main");
     //          hideLoader();
     //        }, 500);
     //      }
     //    }, function(reason) {
     //      console.log(reason);
     //      hideLoader();
     //    });
     //  } else {
     //    swal("Connection Error", "there is problem in your internet connection!", "error");
     //    hideLoader();
     //  }
};


function getInvoiceID(){
   return "Web" + $scope.CompId + ($filter('date')(new Date(), 'MM')) + ($filter('date')(new Date(), 'dd')) + ($filter('date')(new Date(), 'mm')) + ($filter('date')(new Date(), 'ss')) + (Math.floor((Math.random() * 999) + 999));
}



//end of handling exception
$scope.topButtonShow = false;
$scope.$on('$routeChangeSuccess', function() {
  var lastUrl = $location.path();
  loadScripts();
  scrollScript();
 // window.scrollTo(0,0); 
  topFunction(); //reset the scroll if route change
  $scope.Pages['currentPage'] = $location.path();

  $scope.checkOrderRoutes();

  //Stop timer if the screen is not a track order screen
  if($location.path() != '/trackorders')
      $scope.myStopFunction();


//  console.log('location is now', $location.path());
  //            console.log("last " + lastUrl + " " + $location.path());
  //            $rootScope.back();
  if(($location.path() == '/trackorders' || $location.path() == '/myorders' || $location.path() == '/myaddress' || $location.path() == '/editaddress' || $location.path() == '/addaddress') && !IsUserLogged) {
    $scope.ChangePage("login");
  } else if($location.path() == '/checkout-details') {

    if($scope.isPreOrdering) {
      setTimeout(async function() {
        await $scope.preOrderControl();
      }, 1000);
    }

    if ($scope.isPaymentAvailable('card')) {
      $scope.setStripCardForm();
      if ($scope.isPaymentAvailable('card') && !$scope.isPaymentAvailable('cash')) {
        $scope.paymentMethod('Card')
      }      
    }
    
    if(!IsUserLogged) {
      var totalBill = getTotalBill($rootScope.Products);
      if (!(totalBill >= $scope.MinOrderAmount || $scope.OrderTypeVar !== 'Delivery') || !$scope.isGuestModule) {
        $scope.ChangePage("main");
        return;
      }
      // setTimeout(function() {
        $scope.isGuest = true;
      // }, 0);
      // $("#detail-list").fadeOut(500);
      // $("#edit-detail").fadeIn(100);
      // if ($scope.OrderTypeVar === 'Delivery') {
      //   $("#address-list").fadeOut(500);
      //   $("#add-address").fadeIn(500);
      // }
    }else{
      $scope.isGuest = false;
      isAdddressExist();
//      $scope.checkoutProcess();
      //$scope.getAddressesList();
    }
  } else if(($location.path() == '/login') && IsUserLogged) {
    $scope.ChangePage("main");
  }
  if(($location.path() == '/login') && !IsUserLogged) {
    // $scope.ChangePage("main");
    $scope.username = '';
    $scope.password = '';
    $scope.loginError = '';

  }
  if($location.path() == '/signup' && IsUserLogged) {
    $scope.ChangePage("main");
  }
  if(($location.path() == '/main' || $location.path() == '/')) {
    $scope.topButtonShow = true;
  } else {
    $scope.topButtonShow = false;
  }
});
//This code control the scroll if user click on the category
$scope.gotoAnchor = function(x) {
  var newHash = 'anchor' + x;
  $anchorScroll(newHash);
};
$scope.firstthreeDigits = "";
$scope.lastDigits = "";
$scope.SplashScreen = function() {
  showLoader();
  if(localStorage.login != null) {
    var logindata = JSON.parse(localStorage.login);
    if(logindata[0].compid != $scope.CompId) {
      localStorage.removeItem('login');
      localStorage.removeItem('cart');
    }
  }

  if(localStorage.login != null) {
    var logindata = JSON.parse(localStorage.login);
    $scope.firstName = (logindata[0].firstname).trim();
    $scope.lastName = (logindata[0].lastname).trim();
    $scope.number = (logindata[0].number).trim();
    $scope.password = (logindata[0].password).trim();
    $scope.userEmail = (logindata[0].email).trim();
    IsUserLogged = logindata[0].IsUserLogged;
  }
  if(localStorage.cacheCart != null || localStorage.cacheCart == "") {
    var sessionCart = JSON.parse(localStorage.cacheCart);
    if (!$scope.orderTypeData) {
      return;
    }
    if(sessionCart[$scope.orderTypeData.name].length != 0) {
      if(isCartOutDate(sessionCart[$scope.orderTypeData.name][0])) {
        localStorage.removeItem('cacheCart');
      } else {
        $rootScope.Products = sessionCart[$scope.orderTypeData.name];
        getUpdateAmount();
      }
    }
  }
  if($location.path() == '/checkout-details') {
    if(!IsUserLogged) {
      $scope.ChangePage("main");
    } else {
      $scope.getAddressesList();
    }
  }
};

function getRestBusiness() {
  $scope.getBusinessDays();
};

function openAlertPopup() {
  var modal = document.getElementById('alertModal');
  modal.style.display = "block";
  setTimeout(function() {
    modal.style.display = "none";
  }, 500);
};
$scope.openAllergyPopup = function() {
  swal("Do you have a food allergy?", "if you have a food alergy or intolerance (or someone you're ordering for has), phone the restaurant on " + $scope.restaurantPhoneNumber);
  // var modal = document.getElementById('myModal');
  // modal.style.display = "block";
};
$scope.closeAllergyPopup = function() {
  var modal = document.getElementById('myModal');
  //            var span = document.getElementsByClassName("close")[0];
  modal.style.display = "none";
};  
//highlights the menu buttons
$scope.changeClass = function(page){
  for(const key in $scope.Pages) {
    if (key === page) {
      $scope.Pages[key] = 'active';
    } else {
      $scope.Pages[key] = '';
    }
  }
};

$scope.sendEmail = function(contactUs) {
  showLoader();
  var isEmptyError = false;
  for (const key in contactUs) {
    if (isNull(contactUs[key])) {
      isEmptyError = true;
    }
  }
  if(isEmptyError) {
    setTimeout(function() {
      hideLoader();
    }, 0);
    swal("Error", "Please fill all (*) fields.", "error");
  } else {
    const roomInfo = contactUs.guest ? ` Guests: ${contactUs.guest} ON ${moment(contactUs.date).format('DD-MMM-YYYY')} ${moment(contactUs.time).format('hh:mm A')}` : false;
    contactUs.phoneNumber = contactUs.phone ? contactUs.phone : contactUs.phoneNumber;
    var data = {
      compid: Company_ID,
      name: contactUs.name,
      emailaddress: contactUs.email,
      phone: contactUs.phoneNumber,
      message: contactUs.message,
      restEmail: $rootScope.restaurantObject.email,
      bookingdate: moment(contactUs.date).format('DD-MMM-YYYY'),
      bookingtime: moment(contactUs.time).format('hh:mm A'),
      guest: contactUs.guest
    };
    if (roomInfo) {
      data.message += roomInfo;
    }
    if (data.guest) {
      myMethods.sendTableBookingEmail(data).then(res => {
        swal("Congratulations", 
        contactUs.guest ? 'Booking Done.' : 'Your message has been received. We will be in touch shortly'
        , "success");
        $scope.$apply(() => {
          $scope.contactUs = {
            name: '',
            email: '',
            phoneNumber: '',
            message: ''
          };
          $scope.bookingForm = {
            name: '',
            email: '',
            phone: '',
            message: '',
            date: '',
            time: '',
            guest: ''
          };
        });
        hideLoader();
      }).catch(err => {
        hideLoader();
        swal("Failed", JSON.stringify(err), "error");
      });
    } else {
      myMethods.sendContactUsEmail(data).then(res => {
        swal("Thank You", 
        contactUs.guest ? 'Booking Done.' : 'Your message has been received. We will be in touch shortly.'
        , "success");
        $scope.contactUs = {
          name: '',
          email: '',
          phoneNumber: '',
          message: ''
        };
        $scope.bookingForm = {
          name: '',
          email: '',
          phone: '',
          message: '',
          date: '',
          time: '',
          guest: ''
        };
        hideLoader();
      }).catch(err => {
        hideLoader();
        swal("Failed", JSON.stringify(err), "error");
      });
    }
    
  }
};

$scope.resetPassword = function(username){
  showLoader();
  var formData = {
    uname: username,
    compid: $scope.CompId
  };
  $.when(ServerServices.getPassword(formData)).then(function(data) {
    $timeout(function() {
      if(data.status == 'success'){
//        console.log(data.data.data);
        var userDetails = [];
        userDetails = data.data.data;
        if(userDetails.length > 0){
          var resetDetails = {
            compid: Company_ID,
            emailorphone: username
          };
          $.when(ServerServices.sendPasswordMail(resetDetails)).then(function(data) {
            hideLoader();
            swal("Password Sent", `Please check your email for login credentials
            Note: in case you do not receive an email, please check your junk/spam folder.`, "success");
            setTimeout(function() {
              $scope.ChangePage('main');
              hideLoader();
            }, 0);
          }, (err) => {
            console.log(error);
            setTimeout(function() {
              hideLoader();
            }, 0);
          });
          // $.ajax({
          //   type: "POST",
          //   url: "http://oows2.jempos.com/Service.asmx/SendEmailForgetPWD",
          //   data: resetDetails,
          //   success: function(result) {
          //     console.log(result);
          //     swal("Reset Password Has Sent", "Please check your email inbox.", "success");
          //     setTimeout(function() {
          //       $scope.ChangePage('main');
          //       hideLoader();
          //     }, 0);
          //   },
          //   error: function(xhr, status, error) {
          //     console.log(error);
          //     setTimeout(function() {
          //       hideLoader();
          //     }, 0);
          //   }
          // });
        }else{
          hideLoader();
          swal("Reset Failed", "This phone number doesn't belong to any account.", "warning");
        }
      }
    });
  }, function(data) {
    console.log('Failed to reset password.');
    hideLoader();
  });
};

$scope.orderTypeDiscountLabel = () => {
  // debugger
  const index = $scope.itemsDiscount.findIndex(x => x.orderType == $scope.OrderTypeVar);
  if (index === -1) {
    if ($scope.OrderTypeVar == 'Delivery' && $scope.minimumorderamountleft > 0) {
      return `Spend ${$rootScope.restaurantObject.Currency}${($scope.minimumorderamountleft).toFixed(2)} for ${$scope.OrderTypeVar}`;
    } else {
      return '';
    }
  }
  const discount = $scope.itemsDiscount[index];
  let string = `Spend ${$rootScope.restaurantObject.Currency}`;
  if (discount.maxTotal == -1) {
    if ($scope.minimumorderamountleft <= 0) {
      return '';
    }
    string += `${($scope.minimumorderamountleft).toFixed(2)}`;
  } else {
    if ((discount.maxTotal - $scope.subTotalAmount) <= 0) {
      return '';
    }
    string += `${(discount.maxTotal - $scope.subTotalAmount).toFixed(2)}`
  }
  string += ` for ${$scope.OrderTypeVar} and ${discount.maxDiscount}`
  if (discount.discountType == 'percentage') {
    string += '%';
  }
  string += ' discount';
  return string;
};


$scope.ChangeRoute = function() {
  if ($scope.onlyDelivery) {
    localStorage.setItem("orderType", JSON.stringify({name: 'Delivery'}));
    $location.path('/main');
  } else if ($scope.onlyCollection) {
    localStorage.setItem("orderType", JSON.stringify({name: 'Collection'}));
    $location.path('/main');
  }
};
    

$scope.getHome = function(){
//  var landingUrl = "home/index.html#gallery";
  var landingUrl = "home/index.html";
  $window.location.href = landingUrl;
};
$scope.getContactUs = function(){
  //  var landingUrl = "home/index.html#gallery";
    var landingUrl = "home/index.html#contact";
    $window.location.href = landingUrl;
  };
  $scope.redirectTo = function(page){
    //  var landingUrl = "home/index.html#gallery";
      var landingUrl = "home/index.html#"+page;
      $window.location.href = landingUrl;
    };
$scope.redirectToCatering = function(){
    //  var landingUrl = "home/index.html#gallery";
      var landingUrl = "catering.php";
      $window.location.href = landingUrl;
    };

// This code handles discount bar    
$scope.discountbar = true;

$scope.EnableDiscountBar = function(){
  $scope.discountbar = true;
  setTimeout(function(){
    load();
  },0);
};

$scope.closeDiscountBar = function(){
  $scope.discountbar = false;
};
// end of discount bar code
  

$scope.$on('$routeChangeStart', function($event, next, current) { 
//  console.log($location.path());
  $scope.discountbar = true;
  if($scope.discountbar){
    $scope.EnableDiscountBar();
//    console.log("Route Change Execute");
  }
});


  });
  
}]);


MyApp.angular.filter('capitalize', function() {
    return function(input) {
      return (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : '';
    }
});


MyApp.angular.directive('numbersOnly', function () {
    return {
        require: 'ngModel',
        link: function (scope, element, attr, ngModelCtrl) {
            function fromUser(text) {
                if (text) {
                    var transformedInput = text.replace(/[^0-9]/g, '');

                    if (transformedInput !== text) {
                        ngModelCtrl.$setViewValue(transformedInput);
                        ngModelCtrl.$render();
                    }
                    return transformedInput;
                }
                return undefined;
            }            
            ngModelCtrl.$parsers.push(fromUser);
        }
    };
});

//Zip Code Validation
MyApp.angular.directive('zipCodeValidation', function () {
  return {
    require: 'ngModel',
    link: function (scope, element, attr, ngModelCtrl) {
      function fromUser(text) {
          if (text) {
              var transformedInput = text.replace(/[^0-9a-zA-Z ]/g, '');

              if (transformedInput !== text) {
                  ngModelCtrl.$setViewValue(transformedInput);
                  ngModelCtrl.$render();
              }
              return transformedInput;
          }
          return undefined;
      }            
      ngModelCtrl.$parsers.push(fromUser);
    }
  };
});

//Letters pnly
MyApp.angular.directive('lettersOnly', function () {
  return {
      require: 'ngModel',
      link: function (scope, element, attr, ngModelCtrl) {
        function fromUser(text) {
            if (text) {
                var transformedInput = text.replace(/[^a-zA-Z ]/g, '');

                if (transformedInput !== text) {
                    ngModelCtrl.$setViewValue(transformedInput);
                    ngModelCtrl.$render();
                }
                return transformedInput;
            }
            return undefined;
        }
        ngModelCtrl.$parsers.push(fromUser);
      }
  };
});

//Address validation
MyApp.angular.directive('numberLettersOnly', function () {
  return {
    require: 'ngModel',
    link: function (scope, element, attr, ngModelCtrl) {
        function fromUser(text) {
            if (text) {
                var transformedInput = text.replace(/[^0-9a-zA-Z #,.]/g, '');

                if (transformedInput !== text) {
                    ngModelCtrl.$setViewValue(transformedInput);
                    ngModelCtrl.$render();
                }
                return transformedInput;
            }
            return undefined;
        }
        ngModelCtrl.$parsers.push(fromUser);
      }
  };
});

MyApp.angular.filter('addressType', function() {
    return function(input) {
      return (input || input == 'other') ? "Other" : 'Default';
    }
});

MyApp.angular.run(['$anchorScroll', function($anchorScroll) {
  $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
}])

MyApp.angular.controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
  function($anchorScroll, $location, $scope) {
    $scope.gotoAnchor = function(x) {
        alert(x);
      var newHash = 'anchor' + x;
      if ($location.hash() !== newHash) {
        // set the $location.hash to `newHash` and
        // $anchorScroll will automatically scroll to it
        $location.hash('anchor' + x);
      } else {
        // call $anchorScroll() explicitly,
        // since $location.hash hasn't changed
        $anchorScroll();
      }
    };
  }
]);

MyApp.angular.config(function($routeProvider,$locationProvider) {
//    $locationProvider.hashPrefix('');
    $routeProvider
    .when("/main", {
        templateUrl: "assets/js/views/main.html",
        controller: "IndexPageController"
    }).when("/checkout", {
        templateUrl: "assets/js/views/checkout.html",
        controller: "IndexPageController"
    }).when("/login", {
        templateUrl: "assets/js/views/login.html",
        controller: "IndexPageController"
    }).when("/signup", {
        templateUrl: "assets/js/views/signup.html",
        controller: "IndexPageController"
    }).when("/myorders", {
        templateUrl: "assets/js/views/my-account.html",
        controller: "IndexPageController"
    }).when("/myprofile", {
        templateUrl: "assets/js/views/my-profile.html",
        controller: "IndexPageController"
    }).when("/myrewards", {
      templateUrl: "assets/js/views/my-rewards.html",
      controller: "IndexPageController"
    }).when("/myaddress", {
        templateUrl: "assets/js/views/my-address.html",
        controller: "IndexPageController"
    }).when("/trackorders", {
        templateUrl: "assets/js/views/track-orders.html",
        controller: "IndexPageController"
    }).when("/addaddress", {
        templateUrl: "assets/js/views/add-address.html",
        controller: "IndexPageController"
    }).when("/editaddress", {
        templateUrl: "assets/js/views/edit-address.html",
        controller: "IndexPageController"
    }).when("/stripe", {
        templateUrl: "assets/js/views/stripeform.html",
        controller: "IndexPageController"
    }).when("/ordercheckout", {
        templateUrl: "assets/js/views/check-out-screen.html",
        controller: "IndexPageController"
    }).when("/checkout-details", {
        templateUrl: "assets/js/views/checkout-details.html",
        controller: "IndexPageController"
    }).when("/home", {
        templateUrl: "assets/js/views/home.html",
        controller: "IndexPageController"
    }).when("/contact-us", {
        templateUrl: "assets/js/views/contact_us.html",
        controller: "IndexPageController"
    }).when("/reset-password", {
        templateUrl: "assets/js/views/forget-password.html",
        controller: "IndexPageController"
    }).when("/about", {
      templateUrl: "assets/js/views/about.html",
      controller: "IndexPageController"
    }).when("/book", {
      templateUrl: "assets/js/views/book.html",
      controller: "IndexPageController"
    }).when("/news", {
      templateUrl: "assets/js/views/news.html",
      controller: "IndexPageController"
    }).when("/menu", {
      templateUrl: "assets/js/views/menu.html",
      controller: "IndexPageController"
    }).when("/tasting-menu", {
      templateUrl: "assets/js/views/tasting-menu.html",
      controller: "IndexPageController"
    }).when("/gallery", {
      templateUrl: "assets/js/views/gallery.html",
      controller: "IndexPageController"
    }).when("/", {
        templateUrl: "assets/js/views/home.html",
        controller: "IndexPageController"
    });
    $locationProvider.html5Mode(true);
});

MyApp.angular.factory('myMethods', function($http, $timeout, $location) {
    return {
      //API Methods 
      getRestaurant: function(CompId) {
        return $http({
          method: "GET",
          url: API_Services + "Service.asmx/GetResutarents",
          dataType: 'json',
          params: {
            CompID: CompId
          },
          headers: {
            "Content-Type": "application/json"
          }
        }).then(function(result) {
          return result;
        });
      },
      getRestCategories: function(CompId) {
        return $http({
          method: "GET",
          url: API_Services + "Service.asmx/getRestaurentCategories",
          dataType: 'json',
          params: {
            CompID: CompId
          },
          headers: {
            "Content-Type": "application/json"
          }
        }).then(function(result) {
          return result;
        });
      },
      getRestMenuItems: function() {
        return $http({
          method: "GET",
          url: API_Services + "Service.asmx/getMenuItemList",
          dataType: 'json',
          headers: {
            "Content-Type": "application/json"
          }
        }).then(function(result) {
          return result;
        });
      },
      //Methods for Selection and Modifiers Products
      getProductSelection: function(itemID) {
        return $http({
          method: "GET",
          url: API_Services + "Service.asmx/ProductSelections",
          dataType: 'json',
          params: {
            MenuItem_ID: itemID
          },
          headers: {
            "Content-Type": "application/json"
          }
        }).then(function(result) {
          return result;
        });
      },
      getModifiersList: function(Compid) {
        return $http({
          method: "GET",
          url: API_Services + "Service.asmx/getModifierProducts",
          dataType: 'json',
          params: {
            CompID: Compid
          },
          headers: {
            "Content-Type": "application/json"
          }
        }).then(function(result) {
          return result;
        });
      },
      getBusinessDays: function(Compid) {
        return $http({
          method: "GET",
          url: API_Services + "Service.asmx/getBusinessDays",
          dataType: 'json',
          params: {
            CompID: Compid
          },
          headers: {
            "Content-Type": "application/json"
          }
        }).then(function(result) {
          return result;
        });
      },
      SendAnOrderToServer: function(RecvOrder, RcvOrderDetail) {
        return $http({
          method: "GET",
          url: API_Services + "Service.asmx/AddReceiveOrder",
          dataType: 'json',
          params: {
            RecvOrder: JSON.stringify(RecvOrder),
            RecvOrderDetail: JSON.stringify(RcvOrderDetail)
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        }).then(function(result) {
          return result;
        });
      },
      //User Profile Create , Update, Delete
      UserLogin: function(username, password, CompId) {
        return $http({
          method: "GET",
          url: API_Services + "mobileAPIService.asmx/UserLogin",
          //                url: API_Services + "Service.asmx/UserLogin",
          dataType: 'json',
          params: {
            uname: username,
            pwd: password,
            compid: CompId
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        }).then(function(result) {
          return result;
        });
      },
      UserNameValidate: function(username) {
        return $http({
          method: "GET",
          url: API_Services + "Service.asmx/ValidateUserName",
          dataType: 'json',
          params: {
            number: username
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        }).then(function(result) {
          return result;
        });
      },
      // SignUp: function (firstName,password,email,number,address,zipcode,city,CompID) {
      //     return $http({
      //         method: "GET",
      //         url: API_Services + "Service.asmx/CreateAccount",
      //         dataType: 'json',
      //         params: { firstname: firstName, password:password, email:email, number:number,address:address,zipcode:zipcode,city:city,CompID:CompID},
      //         headers: { "Content-Type": "application/json charset=utf-8" }
      //     }).then(function(result){
      //                 return result;
      //             });
      //         },
      SignUp: function(firstname, lastname, password, email, number, CompId) {
        return $http({
          method: "GET",
          url: API_Services + "mobileAPIService.asmx/AddCustomer",
          dataType: 'json',
          params: {
            firstname: firstname,
            lastname: lastname,
            password: password,
            email: email,
            number: number,
            compid: CompId
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        }).then(function(result) {
          return result;
        });
      },
      UpdateUserProfile: function(FirstName, LastName, password, Email, ProfileNumber, CompId) {
        return $http({
          method: "GET",
          url: API_Services + "cust_service.asmx/UpdateUserProfile",
          dataType: 'json',
          params: {
            firstname: FirstName,
            lastname: LastName,
            password: password,
            email: Email,
            number: ProfileNumber,
            CompID: CompId
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        }).then(function(result) {
          return result;
        });
      },
      getRecentOrders: function(username, CompId) {
        return $http({
          method: "GET",
          url: API_Services + "Service.asmx/getRecentOrders",
          dataType: 'json',
          params: {
            CustID: username,
            CompID: CompId
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        }).then(function(result) {
          return result;
        });
      },
      getRecentOrdersDetails: function(username) {
        return $http({
          method: "GET",
          url: API_Services + "Service.asmx/getRecentOrdersProducts",
          dataType: 'json',
          params: {
            RecvorderID: username
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        }).then(function(result) {
          return result;
        });
      },
      //Address API's
      getAddressAPI: function(username, CompId) {
        return $http({
          method: "GET",
          url: API_Services + "cust_service.asmx/getAddresses",
          //url: API_Services + "Service.asmx/getAddresses",
          dataType: 'json',
          params: {
            Cust_Mobile: username,
            compid: CompId
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        }).then(function(result) {
          return result;
        });
      },
      addAddressAPI: function(username, address, street, housenumber, type, postalcode, city, CompId) {
        return $http({
          method: "GET",
          url: API_Services + "cust_service.asmx/AddCustAddress",
          dataType: 'json',
          params: {
            Cust_Mobile: username,
            Cust_Address: address,
            Cust_Street: street,
            Cust_ZipCode: postalcode,
            Cust_HouseNo: housenumber,
            Cust_AddressType: type,
            compid: CompId,
            Cust_City: city
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        }).then(function(result) {
          return result;
        });
      },
      // addAddressAPI: function (Mobile,Address,Street,ZipCode,HouseNo,AddressType) {
      //     return $http({
      //         method: "GET",
      //         url: API_Services + "Service.asmx/SaveUserNewAddress",
      //         dataType: 'json',
      //         params: {Cust_Mobile:Mobile,Cust_Address:Address,Cust_Street:Street,zipcode:ZipCode,Cust_HouseNo:HouseNo,Cust_AddressType:AddressType},
      //         headers: { "Content-Type": "application/json charset=utf-8" }
      //     }).then(function(result){
      //                 return result;
      //             });
      //         },
      updateAddressAPI: function(username, useraddress, userstreet, userpostalcode, userhousenumber, useraddresstype, companyid, usercity, useraddressid) {
        return $http({
          method: "GET",
          url: API_Services + "cust_service.asmx/updateCustAddress",
          //url: API_Services + "Service.asmx/UpdateCustomerinfo",
          dataType: 'json',
          params: {
            Cust_Mobile: username,
            Cust_Address: useraddress,
            Cust_Street: userstreet,
            Cust_ZipCode: userpostalcode,
            Cust_HouseNo: userhousenumber,
            Cust_AddressType: useraddresstype,
            compid: companyid,
            Cust_City: usercity,
            addressId: useraddressid
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        }).then(function(result) {
          return result;
        });
      },
      deleteAddress: function(ID, Mobile, CompId) {
        return $http({
          method: "GET",
          url: API_Services + "cust_service.asmx/DeleteCustomerAddress",
          dataType: 'json',
          params: {
            Cust_ID: ID,
            Cust_Mobile: Mobile,
            CompID: CompId
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        }).then(function(result) {
          return result;
        });
      },
      //End of Addresses API's
      HaveCoupon: function(CompId, couponCode, TotalAmount, Username) {
        return $http({
          method: "GET",
          url: API_Services + "Service.asmx/GetCompCouponCodes",
          dataType: 'json',
          params: {
            CompID: CompId,
            CouponCode_Code: couponCode,
            totalAmount: TotalAmount,
            UserName: Username
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        }).then(function(result) {
          return result;
        });
      },
      //Payment Api
      makeCharge: function(compid, email, paymentToken, amount) {
        return $http({
          method: "GET",
          url: API_Services + "Service.asmx/MakeCharge",
          dataType: 'json',
          params: {
            CompID: compid,
            stripeEmail: email,
            stripeToken: paymentToken,
            totalAmount: amount
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        }).then(function(result) {
          return result;
        });
      },
      getOfferedPostCode: async function(compid) {
        return await $http({
          method: "GET",
          url: API_Services + "Service.asmx/GetPostCodes",
          dataType: 'json',
          params: {
            AuthenKey: Authen_Key,
            CompID: compid
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        });
      },
      checkLoyaltyStatus: async (companyId) => {
        return await $http({
          method: "GET",
          url: API_Services + "service.asmx/ChkLoyaltyStatus",
          dataType: 'json',
          params: {
            AuthenKey: Authen_Key,
            CompID: companyId
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        });
      },
      getLoyaltyRules: async (companyId) => {
        return await $http({
          method: "GET",
          url: API_Services + "service.asmx/GetLoyaltyRules",
          dataType: 'json',
          params: {
            AuthenKey: Authen_Key,
            CompID: companyId
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        });
      },
      getLoyaltyPoints: async (companyId, customerId) => {
        return await $http({
          method: "GET",
          url: API_Services + "service.asmx/GetCustomerLoyaltyPoints",
          dataType: 'json',
          params: {
            AuthenKey: Authen_Key,
            CustomerID: customerId,
            CompID: companyId
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        });
      },
      redeemVoucher: async (companyId, customerId, ruleId, currnetDateTime) => {
        return await $http({
          method: "GET",
          url: API_Services + "service.asmx/RedeemRuleIDandGerVoucherList",
          dataType: 'json',
          params: {
            AuthenKey: Authen_Key,
            CustomerID: customerId,
            CompID: companyId,
            RuleID: ruleId,
            CurrnetDateTime: currnetDateTime
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        });
      },
      getVouchers: async (companyId, customerId) => {
        return await $http({
          method: "GET",
          url: API_Services + "service.asmx/GetLoyaltyVoucherList",
          dataType: 'json',
          params: {
            AuthenKey: Authen_Key,
            CustomerID: customerId,
            CompID: companyId
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        });
      },
      changeVoucherStatus: async (companyId, customerId, voucherID) => {
        return await $http({
          method: "GET",
          url: API_Services + "service.asmx/UpdateLoyaltyVoucherStatus",
          dataType: 'json',
          params: {
            AuthenKey: Authen_Key,
            CustomerID: customerId,
            CompID: companyId,
            VoucherID: voucherID
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        });
      },
      getOrderTypes: async (companyId) => {
        return await $http({
          method: "GET",
          url: API_Services + "service.asmx/GetWebRestaurantOrderTypes",
          dataType: 'json',
          params: {
            AuthenKey: Authen_Key,
            CompID: companyId
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        });
      },
      makeChargeIntents: async (companyId, totalAmount, phone, email) => {
        return await $http({
          method: "GET",
          url: API_Services + "service.asmx/MakeCharge_intents_new",
          dataType: 'json',
          params: {
            totalAmount: totalAmount,
            CompID: companyId,
            phone: phone,
            email: email
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        });
      },
      sendTableBookingEmail: async (data) => {
        return await $http({
          method: "GET",
          url: API_Services + "service.asmx/SendTableBookingEmail",
          dataType: 'json',
          params: {
            compid: data.compid,
            name: data.name,
            emailaddress: data.emailaddress,
            phone: data.phone,
            message: data.message,
            bookingdate: data.bookingdate,
            bookingtime: data.bookingtime,
            guest: data.guest
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        });
      },
      sendContactUsEmail: async (data) => {
        return await $http({
          method: "GET",
          url: API_Services + "service.asmx/ContactUsEmail",
          dataType: 'json',
          params: {
            compid: data.compid,
            name: data.name,
            email: data.emailaddress,
            phone: data.phone,
            message: data.message
          },
          headers: {
            "Content-Type": "application/json charset=utf-8"
          }
        });
      }
    };
  });
MyApp.angular.factory('ServerServices', function($http) {
  'use strict';
  var $deferred_Success = 'success';
  var $deferred_Fail = 'fail';
  // Transform data into parameters
  function transformData(data) {
      return $.param(data);
    }
    // Main POST function
  function processRequest(url, formData) {
    var deferred = new $.Deferred();
    var serviceUrl = API_Services + "Service.asmx/" + url;
    try {
      $http({
        method: 'POST',
        url: serviceUrl,
        data: formData,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
        },
        transformRequest: transformData
      }).then(function successCallback(data, status, headers, config) {
        deferred.resolve({
          status: $deferred_Success,
          data: data
        })
      }, function errorCallback(data, status, headers, config) {
        console.log('Could not send the request.');
        deferred.reject({
          status: $deferred_Fail,
          message: 'Could not send the request.'
        });
      });
    } catch(exception) {
      deferred.reject({
        status: $deferred_Fail,
        message: 'Exception while sending request: ' + exception
      });
    }
    return deferred.promise();
  }
  return {
    getRestaurants: function(formData) {
      console.log('Fetching restaurant details');
      return processRequest('GetResutarents', formData);
    },
    getBusinessDays: function(formData) {
      console.log('Fetching restaurant bussines details');
      return processRequest('getRestBusinessDays', formData);
    },
    getCategories: function(formData) {
      console.log('Fetching restaurant categories');
      return processRequest('getRestaurentCategories', formData);
    },
    getMenuItems: function(formData) {
      console.log('Fetching restaurant Menu Items');
      return processRequest('getMenuItemList', formData);
    },
    getModifierProducts: function(formData) {
      console.log('Fetching restaurant Modifier Products');
      return processRequest('getModifierProducts', formData);
    },
    //making charge
    MakeCharge: function(formData) {
      console.log('payment process');
      return processRequest('MakeCharge', formData);
    },
    getVoucher: function(formData) {
      console.log('fetching special discount event');
      return processRequest('GetCompanyVouhcer', formData);
    },
    getPassword: function(formData) {
      console.log('sending request to reset password.');
      return processRequest('restUserLogin', formData);
    },
    sendPasswordMail: function(formData) {
      console.log('sending email to reset password.');
      return processRequest('SendEmailForgetPWD', formData);
    }
    
  };
});

MyApp.angular.controller('DetailPageController', ['$scope', '$http', 'InitService', function ($scope, $http, InitService) {
  'use strict';
  
  InitService.addEventListener('ready', function () {
    // DOM ready
    console.log('DetailPageController: ok, DOM ready');
    // You can access angular like this:
    // MyApp.angular
    
    // And you can access Framework7 like this:
    // MyApp.fw7.app
  });
  
}]);

!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.swal=e():t.swal=e()}(this,function(){return function(t){function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var n={};return e.m=t,e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:o})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=8)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o="swal-button";e.CLASS_NAMES={MODAL:"swal-modal",OVERLAY:"swal-overlay",SHOW_MODAL:"swal-overlay--show-modal",MODAL_TITLE:"swal-title",MODAL_TEXT:"swal-text",ICON:"swal-icon",ICON_CUSTOM:"swal-icon--custom",CONTENT:"swal-content",FOOTER:"swal-footer",BUTTON_CONTAINER:"swal-button-container",BUTTON:o,CONFIRM_BUTTON:o+"--confirm",CANCEL_BUTTON:o+"--cancel",DANGER_BUTTON:o+"--danger",BUTTON_LOADING:o+"--loading",BUTTON_LOADER:o+"__loader"},e.default=e.CLASS_NAMES},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getNode=function(t){var e="."+t;return document.querySelector(e)},e.stringToNode=function(t){var e=document.createElement("div");return e.innerHTML=t.trim(),e.firstChild},e.insertAfter=function(t,e){var n=e.nextSibling;e.parentNode.insertBefore(t,n)},e.removeNode=function(t){t.parentElement.removeChild(t)},e.throwErr=function(t){throw t=t.replace(/ +(?= )/g,""),"SweetAlert: "+(t=t.trim())},e.isPlainObject=function(t){if("[object Object]"!==Object.prototype.toString.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype},e.ordinalSuffixOf=function(t){var e=t%10,n=t%100;return 1===e&&11!==n?t+"st":2===e&&12!==n?t+"nd":3===e&&13!==n?t+"rd":t+"th"}},function(t,e,n){"use strict";function o(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),o(n(25));var r=n(26);e.overlayMarkup=r.default,o(n(27)),o(n(28)),o(n(29));var i=n(0),a=i.default.MODAL_TITLE,s=i.default.MODAL_TEXT,c=i.default.ICON,l=i.default.FOOTER;e.iconMarkup='\n  <div class="'+c+'"></div>',e.titleMarkup='\n  <div class="'+a+'"></div>\n',e.textMarkup='\n  <div class="'+s+'"></div>',e.footerMarkup='\n  <div class="'+l+'"></div>\n'},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1);e.CONFIRM_KEY="confirm",e.CANCEL_KEY="cancel";var r={visible:!0,text:null,value:null,className:"",closeModal:!0},i=Object.assign({},r,{visible:!1,text:"Cancel",value:null}),a=Object.assign({},r,{text:"OK",value:!0});e.defaultButtonList={cancel:i,confirm:a};var s=function(t){switch(t){case e.CONFIRM_KEY:return a;case e.CANCEL_KEY:return i;default:var n=t.charAt(0).toUpperCase()+t.slice(1);return Object.assign({},r,{text:n,value:t})}},c=function(t,e){var n=s(t);return!0===e?Object.assign({},n,{visible:!0}):"string"==typeof e?Object.assign({},n,{visible:!0,text:e}):o.isPlainObject(e)?Object.assign({visible:!0},n,e):Object.assign({},n,{visible:!1})},l=function(t){for(var e={},n=0,o=Object.keys(t);n<o.length;n++){var r=o[n],a=t[r],s=c(r,a);e[r]=s}return e.cancel||(e.cancel=i),e},u=function(t){var n={};switch(t.length){case 1:n[e.CANCEL_KEY]=Object.assign({},i,{visible:!1});break;case 2:n[e.CANCEL_KEY]=c(e.CANCEL_KEY,t[0]),n[e.CONFIRM_KEY]=c(e.CONFIRM_KEY,t[1]);break;default:o.throwErr("Invalid number of 'buttons' in array ("+t.length+").\n      If you want more than 2 buttons, you need to use an object!")}return n};e.getButtonListOpts=function(t){var n=e.defaultButtonList;return"string"==typeof t?n[e.CONFIRM_KEY]=c(e.CONFIRM_KEY,t):Array.isArray(t)?n=u(t):o.isPlainObject(t)?n=l(t):!0===t?n=u([!0,!0]):!1===t?n=u([!1,!1]):void 0===t&&(n=e.defaultButtonList),n}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),r=n(2),i=n(0),a=i.default.MODAL,s=i.default.OVERLAY,c=n(30),l=n(31),u=n(32),f=n(33);e.injectElIntoModal=function(t){var e=o.getNode(a),n=o.stringToNode(t);return e.appendChild(n),n};var d=function(t){t.className=a,t.textContent=""},p=function(t,e){d(t);var n=e.className;n&&t.classList.add(n)};e.initModalContent=function(t){var e=o.getNode(a);p(e,t),c.default(t.icon),l.initTitle(t.title),l.initText(t.text),f.default(t.content),u.default(t.buttons,t.dangerMode)};var m=function(){var t=o.getNode(s),e=o.stringToNode(r.modalMarkup);t.appendChild(e)};e.default=m},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(3),r={isOpen:!1,promise:null,actions:{},timer:null},i=Object.assign({},r);e.resetState=function(){i=Object.assign({},r)},e.setActionValue=function(t){if("string"==typeof t)return a(o.CONFIRM_KEY,t);for(var e in t)a(e,t[e])};var a=function(t,e){i.actions[t]||(i.actions[t]={}),Object.assign(i.actions[t],{value:e})};e.setActionOptionsFor=function(t,e){var n=(void 0===e?{}:e).closeModal,o=void 0===n||n;Object.assign(i.actions[t],{closeModal:o})},e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),r=n(3),i=n(0),a=i.default.OVERLAY,s=i.default.SHOW_MODAL,c=i.default.BUTTON,l=i.default.BUTTON_LOADING,u=n(5);e.openModal=function(){o.getNode(a).classList.add(s),u.default.isOpen=!0};var f=function(){o.getNode(a).classList.remove(s),u.default.isOpen=!1};e.onAction=function(t){void 0===t&&(t=r.CANCEL_KEY);var e=u.default.actions[t],n=e.value;if(!1===e.closeModal){var i=c+"--"+t;o.getNode(i).classList.add(l)}else f();u.default.promise.resolve(n)},e.getState=function(){var t=Object.assign({},u.default);return delete t.promise,delete t.timer,t},e.stopLoading=function(){for(var t=document.querySelectorAll("."+c),e=0;e<t.length;e++){t[e].classList.remove(l)}}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){(function(e){t.exports=e.sweetAlert=n(9)}).call(e,n(7))},function(t,e,n){(function(e){t.exports=e.swal=n(10)}).call(e,n(7))},function(t,e,n){"undefined"!=typeof window&&n(11),n(16);var o=n(23).default;t.exports=o},function(t,e,n){var o=n(12);"string"==typeof o&&(o=[[t.i,o,""]]);var r={insertAt:"top"};r.transform=void 0;n(14)(o,r);o.locals&&(t.exports=o.locals)},function(t,e,n){e=t.exports=n(13)(void 0),e.push([t.i,'.swal-icon--error{border-color:#f27474;-webkit-animation:animateErrorIcon .5s;animation:animateErrorIcon .5s}.swal-icon--error__x-mark{position:relative;display:block;-webkit-animation:animateXMark .5s;animation:animateXMark .5s}.swal-icon--error__line{position:absolute;height:5px;width:47px;background-color:#f27474;display:block;top:37px;border-radius:2px}.swal-icon--error__line--left{-webkit-transform:rotate(45deg);transform:rotate(45deg);left:17px}.swal-icon--error__line--right{-webkit-transform:rotate(-45deg);transform:rotate(-45deg);right:16px}@-webkit-keyframes animateErrorIcon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}to{-webkit-transform:rotateX(0deg);transform:rotateX(0deg);opacity:1}}@keyframes animateErrorIcon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}to{-webkit-transform:rotateX(0deg);transform:rotateX(0deg);opacity:1}}@-webkit-keyframes animateXMark{0%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}50%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}80%{-webkit-transform:scale(1.15);transform:scale(1.15);margin-top:-6px}to{-webkit-transform:scale(1);transform:scale(1);margin-top:0;opacity:1}}@keyframes animateXMark{0%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}50%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}80%{-webkit-transform:scale(1.15);transform:scale(1.15);margin-top:-6px}to{-webkit-transform:scale(1);transform:scale(1);margin-top:0;opacity:1}}.swal-icon--warning{border-color:#f8bb86;-webkit-animation:pulseWarning .75s infinite alternate;animation:pulseWarning .75s infinite alternate}.swal-icon--warning__body{width:5px;height:47px;top:10px;border-radius:2px;margin-left:-2px}.swal-icon--warning__body,.swal-icon--warning__dot{position:absolute;left:50%;background-color:#f8bb86}.swal-icon--warning__dot{width:7px;height:7px;border-radius:50%;margin-left:-4px;bottom:-11px}@-webkit-keyframes pulseWarning{0%{border-color:#f8d486}to{border-color:#f8bb86}}@keyframes pulseWarning{0%{border-color:#f8d486}to{border-color:#f8bb86}}.swal-icon--success{border-color:#a5dc86}.swal-icon--success:after,.swal-icon--success:before{content:"";border-radius:50%;position:absolute;width:60px;height:120px;background:#fff;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.swal-icon--success:before{border-radius:120px 0 0 120px;top:-7px;left:-33px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:60px 60px;transform-origin:60px 60px}.swal-icon--success:after{border-radius:0 120px 120px 0;top:-11px;left:30px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:0 60px;transform-origin:0 60px;-webkit-animation:rotatePlaceholder 4.25s ease-in;animation:rotatePlaceholder 4.25s ease-in}.swal-icon--success__ring{width:80px;height:80px;border:4px solid hsla(98,55%,69%,.2);border-radius:50%;box-sizing:content-box;position:absolute;left:-4px;top:-4px;z-index:2}.swal-icon--success__hide-corners{width:5px;height:90px;background-color:#fff;padding:1px;position:absolute;left:28px;top:8px;z-index:1;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.swal-icon--success__line{height:5px;background-color:#a5dc86;display:block;border-radius:2px;position:absolute;z-index:2}.swal-icon--success__line--tip{width:25px;left:14px;top:46px;-webkit-transform:rotate(45deg);transform:rotate(45deg);-webkit-animation:animateSuccessTip .75s;animation:animateSuccessTip .75s}.swal-icon--success__line--long{width:47px;right:8px;top:38px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-animation:animateSuccessLong .75s;animation:animateSuccessLong .75s}@-webkit-keyframes rotatePlaceholder{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}to{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@keyframes rotatePlaceholder{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}to{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@-webkit-keyframes animateSuccessTip{0%{width:0;left:1px;top:19px}54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@keyframes animateSuccessTip{0%{width:0;left:1px;top:19px}54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@-webkit-keyframes animateSuccessLong{0%{width:0;right:46px;top:54px}65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}@keyframes animateSuccessLong{0%{width:0;right:46px;top:54px}65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}.swal-icon--info{border-color:#c9dae1}.swal-icon--info:before{width:5px;height:29px;bottom:17px;border-radius:2px;margin-left:-2px}.swal-icon--info:after,.swal-icon--info:before{content:"";position:absolute;left:50%;background-color:#c9dae1}.swal-icon--info:after{width:7px;height:7px;border-radius:50%;margin-left:-3px;top:19px}.swal-icon{width:80px;height:80px;border-width:4px;border-style:solid;border-radius:50%;padding:0;position:relative;box-sizing:content-box;margin:20px auto}.swal-icon:first-child{margin-top:32px}.swal-icon--custom{width:auto;height:auto;max-width:100%;border:none;border-radius:0}.swal-icon img{max-width:100%;max-height:100%}.swal-title{color:rgba(0,0,0,.65);font-weight:600;text-transform:none;position:relative;display:block;padding:13px 16px;font-size:27px;line-height:normal;text-align:center;margin-bottom:0}.swal-title:first-child{margin-top:26px}.swal-title:not(:first-child){padding-bottom:0}.swal-title:not(:last-child){margin-bottom:13px}.swal-text{font-size:16px;position:relative;float:none;line-height:normal;vertical-align:top;text-align:left;display:inline-block;margin:0;padding:0 10px;font-weight:400;color:rgba(0,0,0,.64);max-width:calc(100% - 20px);overflow-wrap:break-word;box-sizing:border-box}.swal-text:first-child{margin-top:45px}.swal-text:last-child{margin-bottom:45px}.swal-footer{text-align:right;padding-top:13px;margin-top:13px;padding:13px 16px;border-radius:inherit;border-top-left-radius:0;border-top-right-radius:0}.swal-button-container{margin:5px;display:inline-block;position:relative}.swal-button{background-color:#7cd1f9;color:#fff;border:none;box-shadow:none;border-radius:5px;font-weight:600;font-size:14px;padding:10px 24px;margin:0;cursor:pointer}.swal-button:not([disabled]):hover{background-color:#78cbf2}.swal-button:active{background-color:#70bce0}.swal-button:focus{outline:none;box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(43,114,165,.29)}.swal-button[disabled]{opacity:.5;cursor:default}.swal-button::-moz-focus-inner{border:0}.swal-button--cancel{color:#555;background-color:#efefef}.swal-button--cancel:not([disabled]):hover{background-color:#e8e8e8}.swal-button--cancel:active{background-color:#d7d7d7}.swal-button--cancel:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(116,136,150,.29)}.swal-button--danger{background-color:#e64942}.swal-button--danger:not([disabled]):hover{background-color:#df4740}.swal-button--danger:active{background-color:#cf423b}.swal-button--danger:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(165,43,43,.29)}.swal-content{padding:0 20px;margin-top:20px;font-size:medium}.swal-content:last-child{margin-bottom:20px}.swal-content__input,.swal-content__textarea{-webkit-appearance:none;background-color:#fff;border:none;font-size:14px;display:block;box-sizing:border-box;width:100%;border:1px solid rgba(0,0,0,.14);padding:10px 13px;border-radius:2px;transition:border-color .2s}.swal-content__input:focus,.swal-content__textarea:focus{outline:none;border-color:#6db8ff}.swal-content__textarea{resize:vertical}.swal-button--loading{color:transparent}.swal-button--loading~.swal-button__loader{opacity:1}.swal-button__loader{position:absolute;height:auto;width:43px;z-index:2;left:50%;top:50%;-webkit-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);text-align:center;pointer-events:none;opacity:0}.swal-button__loader div{display:inline-block;float:none;vertical-align:baseline;width:9px;height:9px;padding:0;border:none;margin:2px;opacity:.4;border-radius:7px;background-color:hsla(0,0%,100%,.9);transition:background .2s;-webkit-animation:swal-loading-anim 1s infinite;animation:swal-loading-anim 1s infinite}.swal-button__loader div:nth-child(3n+2){-webkit-animation-delay:.15s;animation-delay:.15s}.swal-button__loader div:nth-child(3n+3){-webkit-animation-delay:.3s;animation-delay:.3s}@-webkit-keyframes swal-loading-anim{0%{opacity:.4}20%{opacity:.4}50%{opacity:1}to{opacity:.4}}@keyframes swal-loading-anim{0%{opacity:.4}20%{opacity:.4}50%{opacity:1}to{opacity:.4}}.swal-overlay{position:fixed;top:0;bottom:0;left:0;right:0;text-align:center;font-size:0;overflow-y:auto;background-color:rgba(0,0,0,.4);z-index:10000;pointer-events:none;opacity:0;transition:opacity .3s}.swal-overlay:before{content:" ";display:inline-block;vertical-align:middle;height:100%}.swal-overlay--show-modal{opacity:1;pointer-events:auto}.swal-overlay--show-modal .swal-modal{opacity:1;pointer-events:auto;box-sizing:border-box;-webkit-animation:showSweetAlert .3s;animation:showSweetAlert .3s;will-change:transform}.swal-modal{width:478px;opacity:0;pointer-events:none;background-color:#fff;text-align:center;border-radius:5px;position:static;margin:20px auto;display:inline-block;vertical-align:middle;-webkit-transform:scale(1);transform:scale(1);-webkit-transform-origin:50% 50%;transform-origin:50% 50%;z-index:10001;transition:opacity .2s,-webkit-transform .3s;transition:transform .3s,opacity .2s;transition:transform .3s,opacity .2s,-webkit-transform .3s}@media (max-width:500px){.swal-modal{width:calc(100% - 20px)}}@-webkit-keyframes showSweetAlert{0%{-webkit-transform:scale(1);transform:scale(1)}1%{-webkit-transform:scale(.5);transform:scale(.5)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}to{-webkit-transform:scale(1);transform:scale(1)}}@keyframes showSweetAlert{0%{-webkit-transform:scale(1);transform:scale(1)}1%{-webkit-transform:scale(.5);transform:scale(.5)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}to{-webkit-transform:scale(1);transform:scale(1)}}',""])},function(t,e){function n(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=o(r);return[n].concat(r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"})).concat([i]).join("\n")}return[n].join("\n")}function o(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var o=n(e,t);return e[2]?"@media "+e[2]+"{"+o+"}":o}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<t.length;r++){var a=t[r];"number"==typeof a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){function o(t,e){for(var n=0;n<t.length;n++){var o=t[n],r=m[o.id];if(r){r.refs++;for(var i=0;i<r.parts.length;i++)r.parts[i](o.parts[i]);for(;i<o.parts.length;i++)r.parts.push(u(o.parts[i],e))}else{for(var a=[],i=0;i<o.parts.length;i++)a.push(u(o.parts[i],e));m[o.id]={id:o.id,refs:1,parts:a}}}}function r(t,e){for(var n=[],o={},r=0;r<t.length;r++){var i=t[r],a=e.base?i[0]+e.base:i[0],s=i[1],c=i[2],l=i[3],u={css:s,media:c,sourceMap:l};o[a]?o[a].parts.push(u):n.push(o[a]={id:a,parts:[u]})}return n}function i(t,e){var n=v(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=w[w.length-1];if("top"===t.insertAt)o?o.nextSibling?n.insertBefore(e,o.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),w.push(e);else{if("bottom"!==t.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(e)}}function a(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=w.indexOf(t);e>=0&&w.splice(e,1)}function s(t){var e=document.createElement("style");return t.attrs.type="text/css",l(e,t.attrs),i(t,e),e}function c(t){var e=document.createElement("link");return t.attrs.type="text/css",t.attrs.rel="stylesheet",l(e,t.attrs),i(t,e),e}function l(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function u(t,e){var n,o,r,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var l=h++;n=g||(g=s(e)),o=f.bind(null,n,l,!1),r=f.bind(null,n,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=c(e),o=p.bind(null,n,e),r=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(e),o=d.bind(null,n),r=function(){a(n)});return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else r()}}function f(t,e,n,o){var r=n?"":o.css;if(t.styleSheet)t.styleSheet.cssText=x(e,r);else{var i=document.createTextNode(r),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function d(t,e){var n=e.css,o=e.media;if(o&&t.setAttribute("media",o),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function p(t,e,n){var o=n.css,r=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||i)&&(o=y(o)),r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}var m={},b=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),v=function(t){var e={};return function(n){return void 0===e[n]&&(e[n]=t.call(this,n)),e[n]}}(function(t){return document.querySelector(t)}),g=null,h=0,w=[],y=n(15);t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");e=e||{},e.attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||(e.singleton=b()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=r(t,e);return o(n,e),function(t){for(var i=[],a=0;a<n.length;a++){var s=n[a],c=m[s.id];c.refs--,i.push(c)}if(t){o(r(t,e),e)}for(var a=0;a<i.length;a++){var c=i[a];if(0===c.refs){for(var l=0;l<c.parts.length;l++)c.parts[l]();delete m[c.id]}}}};var x=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}()},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,o=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var r=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(r))return t;var i;return i=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:o+r.replace(/^\.\//,""),"url("+JSON.stringify(i)+")"})}},function(t,e,n){var o=n(17);"undefined"==typeof window||window.Promise||(window.Promise=o),n(21),String.prototype.includes||(String.prototype.includes=function(t,e){"use strict";return"number"!=typeof e&&(e=0),!(e+t.length>this.length)&&-1!==this.indexOf(t,e)}),Array.prototype.includes||Object.defineProperty(Array.prototype,"includes",{value:function(t,e){if(null==this)throw new TypeError('"this" is null or not defined');var n=Object(this),o=n.length>>>0;if(0===o)return!1;for(var r=0|e,i=Math.max(r>=0?r:o-Math.abs(r),0);i<o;){if(function(t,e){return t===e||"number"==typeof t&&"number"==typeof e&&isNaN(t)&&isNaN(e)}(n[i],t))return!0;i++}return!1}}),"undefined"!=typeof window&&function(t){t.forEach(function(t){t.hasOwnProperty("remove")||Object.defineProperty(t,"remove",{configurable:!0,enumerable:!0,writable:!0,value:function(){this.parentNode.removeChild(this)}})})}([Element.prototype,CharacterData.prototype,DocumentType.prototype])},function(t,e,n){(function(e){!function(n){function o(){}function r(t,e){return function(){t.apply(e,arguments)}}function i(t){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],f(t,this)}function a(t,e){for(;3===t._state;)t=t._value;if(0===t._state)return void t._deferreds.push(e);t._handled=!0,i._immediateFn(function(){var n=1===t._state?e.onFulfilled:e.onRejected;if(null===n)return void(1===t._state?s:c)(e.promise,t._value);var o;try{o=n(t._value)}catch(t){return void c(e.promise,t)}s(e.promise,o)})}function s(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if(e instanceof i)return t._state=3,t._value=e,void l(t);if("function"==typeof n)return void f(r(n,e),t)}t._state=1,t._value=e,l(t)}catch(e){c(t,e)}}function c(t,e){t._state=2,t._value=e,l(t)}function l(t){2===t._state&&0===t._deferreds.length&&i._immediateFn(function(){t._handled||i._unhandledRejectionFn(t._value)});for(var e=0,n=t._deferreds.length;e<n;e++)a(t,t._deferreds[e]);t._deferreds=null}function u(t,e,n){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.promise=n}function f(t,e){var n=!1;try{t(function(t){n||(n=!0,s(e,t))},function(t){n||(n=!0,c(e,t))})}catch(t){if(n)return;n=!0,c(e,t)}}var d=setTimeout;i.prototype.catch=function(t){return this.then(null,t)},i.prototype.then=function(t,e){var n=new this.constructor(o);return a(this,new u(t,e,n)),n},i.all=function(t){var e=Array.prototype.slice.call(t);return new i(function(t,n){function o(i,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,function(t){o(i,t)},n)}e[i]=a,0==--r&&t(e)}catch(t){n(t)}}if(0===e.length)return t([]);for(var r=e.length,i=0;i<e.length;i++)o(i,e[i])})},i.resolve=function(t){return t&&"object"==typeof t&&t.constructor===i?t:new i(function(e){e(t)})},i.reject=function(t){return new i(function(e,n){n(t)})},i.race=function(t){return new i(function(e,n){for(var o=0,r=t.length;o<r;o++)t[o].then(e,n)})},i._immediateFn="function"==typeof e&&function(t){e(t)}||function(t){d(t,0)},i._unhandledRejectionFn=function(t){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)},i._setImmediateFn=function(t){i._immediateFn=t},i._setUnhandledRejectionFn=function(t){i._unhandledRejectionFn=t},void 0!==t&&t.exports?t.exports=i:n.Promise||(n.Promise=i)}(this)}).call(e,n(18).setImmediate)},function(t,e,n){function o(t,e){this._id=t,this._clearFn=e}var r=Function.prototype.apply;e.setTimeout=function(){return new o(r.call(setTimeout,window,arguments),clearTimeout)},e.setInterval=function(){return new o(r.call(setInterval,window,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(window,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(19),e.setImmediate=setImmediate,e.clearImmediate=clearImmediate},function(t,e,n){(function(t,e){!function(t,n){"use strict";function o(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var o={callback:t,args:e};return l[c]=o,s(c),c++}function r(t){delete l[t]}function i(t){var e=t.callback,o=t.args;switch(o.length){case 0:e();break;case 1:e(o[0]);break;case 2:e(o[0],o[1]);break;case 3:e(o[0],o[1],o[2]);break;default:e.apply(n,o)}}function a(t){if(u)setTimeout(a,0,t);else{var e=l[t];if(e){u=!0;try{i(e)}finally{r(t),u=!1}}}}if(!t.setImmediate){var s,c=1,l={},u=!1,f=t.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(t);d=d&&d.setTimeout?d:t,"[object process]"==={}.toString.call(t.process)?function(){s=function(t){e.nextTick(function(){a(t)})}}():function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&a(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),s=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){a(t.data)},s=function(e){t.port2.postMessage(e)}}():f&&"onreadystatechange"in f.createElement("script")?function(){var t=f.documentElement;s=function(e){var n=f.createElement("script");n.onreadystatechange=function(){a(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():function(){s=function(t){setTimeout(a,0,t)}}(),d.setImmediate=o,d.clearImmediate=r}}("undefined"==typeof self?void 0===t?this:t:self)}).call(e,n(7),n(20))},function(t,e){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function r(t){if(u===setTimeout)return setTimeout(t,0);if((u===n||!u)&&setTimeout)return u=setTimeout,setTimeout(t,0);try{return u(t,0)}catch(e){try{return u.call(null,t,0)}catch(e){return u.call(this,t,0)}}}function i(t){if(f===clearTimeout)return clearTimeout(t);if((f===o||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(t);try{return f(t)}catch(e){try{return f.call(null,t)}catch(e){return f.call(this,t)}}}function a(){b&&p&&(b=!1,p.length?m=p.concat(m):v=-1,m.length&&s())}function s(){if(!b){var t=r(a);b=!0;for(var e=m.length;e;){for(p=m,m=[];++v<e;)p&&p[v].run();v=-1,e=m.length}p=null,b=!1,i(t)}}function c(t,e){this.fun=t,this.array=e}function l(){}var u,f,d=t.exports={};!function(){try{u="function"==typeof setTimeout?setTimeout:n}catch(t){u=n}try{f="function"==typeof clearTimeout?clearTimeout:o}catch(t){f=o}}();var p,m=[],b=!1,v=-1;d.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];m.push(new c(t,e)),1!==m.length||b||r(s)},c.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=l,d.addListener=l,d.once=l,d.off=l,d.removeListener=l,d.removeAllListeners=l,d.emit=l,d.prependListener=l,d.prependOnceListener=l,d.listeners=function(t){return[]},d.binding=function(t){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(t){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},function(t,e,n){"use strict";n(22).polyfill()},function(t,e,n){"use strict";function o(t,e){if(void 0===t||null===t)throw new TypeError("Cannot convert first argument to object");for(var n=Object(t),o=1;o<arguments.length;o++){var r=arguments[o];if(void 0!==r&&null!==r)for(var i=Object.keys(Object(r)),a=0,s=i.length;a<s;a++){var c=i[a],l=Object.getOwnPropertyDescriptor(r,c);void 0!==l&&l.enumerable&&(n[c]=r[c])}}return n}function r(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:o})}t.exports={assign:o,polyfill:r}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(24),r=n(6),i=n(5),a=n(36),s=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if("undefined"!=typeof window){var n=a.getOpts.apply(void 0,t);return new Promise(function(t,e){i.default.promise={resolve:t,reject:e},o.default(n),setTimeout(function(){r.openModal()})})}};s.close=r.onAction,s.getState=r.getState,s.setActionValue=i.setActionValue,s.stopLoading=r.stopLoading,s.setDefaults=a.setDefaults,e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),r=n(0),i=r.default.MODAL,a=n(4),s=n(34),c=n(35),l=n(1);e.init=function(t){o.getNode(i)||(document.body||l.throwErr("You can only use SweetAlert AFTER the DOM has loaded!"),s.default(),a.default()),a.initModalContent(t),c.default(t)},e.default=e.init},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),r=o.default.MODAL;e.modalMarkup='\n  <div class="'+r+'" role="dialog" aria-modal="true"></div>',e.default=e.modalMarkup},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),r=o.default.OVERLAY,i='<div \n    class="'+r+'"\n    tabIndex="-1">\n  </div>';e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),r=o.default.ICON;e.errorIconMarkup=function(){var t=r+"--error",e=t+"__line";return'\n    <div class="'+t+'__x-mark">\n      <span class="'+e+" "+e+'--left"></span>\n      <span class="'+e+" "+e+'--right"></span>\n    </div>\n  '},e.warningIconMarkup=function(){var t=r+"--warning";return'\n    <span class="'+t+'__body">\n      <span class="'+t+'__dot"></span>\n    </span>\n  '},e.successIconMarkup=function(){var t=r+"--success";return'\n    <span class="'+t+"__line "+t+'__line--long"></span>\n    <span class="'+t+"__line "+t+'__line--tip"></span>\n\n    <div class="'+t+'__ring"></div>\n    <div class="'+t+'__hide-corners"></div>\n  '}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),r=o.default.CONTENT;e.contentMarkup='\n  <div class="'+r+'">\n\n  </div>\n'},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),r=o.default.BUTTON_CONTAINER,i=o.default.BUTTON,a=o.default.BUTTON_LOADER;e.buttonMarkup='\n  <div class="'+r+'">\n\n    <button\n      class="'+i+'"\n    ></button>\n\n    <div class="'+a+'">\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n\n  </div>\n'},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(4),r=n(2),i=n(0),a=i.default.ICON,s=i.default.ICON_CUSTOM,c=["error","warning","success","info"],l={error:r.errorIconMarkup(),warning:r.warningIconMarkup(),success:r.successIconMarkup()},u=function(t,e){var n=a+"--"+t;e.classList.add(n);var o=l[t];o&&(e.innerHTML=o)},f=function(t,e){e.classList.add(s);var n=document.createElement("img");n.src=t,e.appendChild(n)},d=function(t){if(t){var e=o.injectElIntoModal(r.iconMarkup);c.includes(t)?u(t,e):f(t,e)}};e.default=d},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(2),r=n(4),i=function(t){navigator.userAgent.includes("AppleWebKit")&&(t.style.display="none",t.offsetHeight,t.style.display="")};e.initTitle=function(t){if(t){var e=r.injectElIntoModal(o.titleMarkup);e.textContent=t,i(e)}},e.initText=function(t){if(t){var e=document.createDocumentFragment();t.split("\n").forEach(function(t,n,o){e.appendChild(document.createTextNode(t)),n<o.length-1&&e.appendChild(document.createElement("br"))});var n=r.injectElIntoModal(o.textMarkup);n.appendChild(e),i(n)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),r=n(4),i=n(0),a=i.default.BUTTON,s=i.default.DANGER_BUTTON,c=n(3),l=n(2),u=n(6),f=n(5),d=function(t,e,n){var r=e.text,i=e.value,d=e.className,p=e.closeModal,m=o.stringToNode(l.buttonMarkup),b=m.querySelector("."+a),v=a+"--"+t;if(b.classList.add(v),d){(Array.isArray(d)?d:d.split(" ")).filter(function(t){return t.length>0}).forEach(function(t){b.classList.add(t)})}n&&t===c.CONFIRM_KEY&&b.classList.add(s),b.textContent=r;var g={};return g[t]=i,f.setActionValue(g),f.setActionOptionsFor(t,{closeModal:p}),b.addEventListener("click",function(){return u.onAction(t)}),m},p=function(t,e){var n=r.injectElIntoModal(l.footerMarkup);for(var o in t){var i=t[o],a=d(o,i,e);i.visible&&n.appendChild(a)}0===n.children.length&&n.remove()};e.default=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(3),r=n(4),i=n(2),a=n(5),s=n(6),c=n(0),l=c.default.CONTENT,u=function(t){t.addEventListener("input",function(t){var e=t.target,n=e.value;a.setActionValue(n)}),t.addEventListener("keyup",function(t){if("Enter"===t.key)return s.onAction(o.CONFIRM_KEY)}),setTimeout(function(){t.focus(),a.setActionValue("")},0)},f=function(t,e,n){var o=document.createElement(e),r=l+"__"+e;o.classList.add(r);for(var i in n){var a=n[i];o[i]=a}"input"===e&&u(o),t.appendChild(o)},d=function(t){if(t){var e=r.injectElIntoModal(i.contentMarkup),n=t.element,o=t.attributes;"string"==typeof n?f(e,n,o):e.appendChild(n)}};e.default=d},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),r=n(2),i=function(){var t=o.stringToNode(r.overlayMarkup);document.body.appendChild(t)};e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(5),r=n(6),i=n(1),a=n(3),s=n(0),c=s.default.MODAL,l=s.default.BUTTON,u=s.default.OVERLAY,f=function(t){t.preventDefault(),v()},d=function(t){t.preventDefault(),g()},p=function(t){if(o.default.isOpen)switch(t.key){case"Escape":return r.onAction(a.CANCEL_KEY)}},m=function(t){if(o.default.isOpen)switch(t.key){case"Tab":return f(t)}},b=function(t){if(o.default.isOpen)return"Tab"===t.key&&t.shiftKey?d(t):void 0},v=function(){var t=i.getNode(l);t&&(t.tabIndex=0,t.focus())},g=function(){var t=i.getNode(c),e=t.querySelectorAll("."+l),n=e.length-1,o=e[n];o&&o.focus()},h=function(t){t[t.length-1].addEventListener("keydown",m)},w=function(t){t[0].addEventListener("keydown",b)},y=function(){var t=i.getNode(c),e=t.querySelectorAll("."+l);e.length&&(h(e),w(e))},x=function(t){if(i.getNode(u)===t.target)return r.onAction(a.CANCEL_KEY)},_=function(t){var e=i.getNode(u);e.removeEventListener("click",x),t&&e.addEventListener("click",x)},k=function(t){o.default.timer&&clearTimeout(o.default.timer),t&&(o.default.timer=window.setTimeout(function(){return r.onAction(a.CANCEL_KEY)},t))},O=function(t){t.closeOnEsc?document.addEventListener("keyup",p):document.removeEventListener("keyup",p),t.dangerMode?v():g(),y(),_(t.closeOnClickOutside),k(t.timer)};e.default=O},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),r=n(3),i=n(37),a=n(38),s={title:null,text:null,icon:null,buttons:r.defaultButtonList,content:null,className:null,closeOnClickOutside:!0,closeOnEsc:!0,dangerMode:!1,timer:null},c=Object.assign({},s);e.setDefaults=function(t){c=Object.assign({},s,t)};var l=function(t){var e=t&&t.button,n=t&&t.buttons;return void 0!==e&&void 0!==n&&o.throwErr("Cannot set both 'button' and 'buttons' options!"),void 0!==e?{confirm:e}:n},u=function(t){return o.ordinalSuffixOf(t+1)},f=function(t,e){o.throwErr(u(e)+" argument ('"+t+"') is invalid")},d=function(t,e){var n=t+1,r=e[n];o.isPlainObject(r)||void 0===r||o.throwErr("Expected "+u(n)+" argument ('"+r+"') to be a plain object")},p=function(t,e){var n=t+1,r=e[n];void 0!==r&&o.throwErr("Unexpected "+u(n)+" argument ("+r+")")},m=function(t,e,n,r){var i=typeof e,a="string"===i,s=e instanceof Element;if(a){if(0===n)return{text:e};if(1===n)return{text:e,title:r[0]};if(2===n)return d(n,r),{icon:e};f(e,n)}else{if(s&&0===n)return d(n,r),{content:e};if(o.isPlainObject(e))return p(n,r),e;f(e,n)}};e.getOpts=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n={};t.forEach(function(e,o){var r=m(0,e,o,t);Object.assign(n,r)});var o=l(n);n.buttons=r.getButtonListOpts(o),delete n.button,n.content=i.getContentOpts(n.content);var u=Object.assign({},s,c,n);return Object.keys(u).forEach(function(t){a.DEPRECATED_OPTS[t]&&a.logDeprecation(t)}),u}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),r={element:"input",attributes:{placeholder:""}};e.getContentOpts=function(t){var e={};return o.isPlainObject(t)?Object.assign(e,t):t instanceof Element?{element:t}:"input"===t?r:null}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.logDeprecation=function(t){var n=e.DEPRECATED_OPTS[t],o=n.onlyRename,r=n.replacement,i=n.subOption,a=n.link,s=o?"renamed":"deprecated",c='SweetAlert warning: "'+t+'" option has been '+s+".";if(r){c+=" Please use"+(i?' "'+i+'" in ':" ")+'"'+r+'" instead.'}var l="https://sweetalert.js.org";c+=a?" More details: "+l+a:" More details: "+l+"/guides/#upgrading-from-1x",console.warn(c)},e.DEPRECATED_OPTS={type:{replacement:"icon",link:"/docs/#icon"},imageUrl:{replacement:"icon",link:"/docs/#icon"},customClass:{replacement:"className",onlyRename:!0,link:"/docs/#classname"},imageSize:{},showCancelButton:{replacement:"buttons",link:"/docs/#buttons"},showConfirmButton:{replacement:"button",link:"/docs/#button"},confirmButtonText:{replacement:"button",link:"/docs/#button"},confirmButtonColor:{},cancelButtonText:{replacement:"buttons",link:"/docs/#buttons"},closeOnConfirm:{replacement:"button",subOption:"closeModal",link:"/docs/#button"},closeOnCancel:{replacement:"buttons",subOption:"closeModal",link:"/docs/#buttons"},showLoaderOnConfirm:{replacement:"buttons"},animation:{},inputType:{replacement:"content",link:"/docs/#content"},inputValue:{replacement:"content",link:"/docs/#content"},inputPlaceholder:{replacement:"content",link:"/docs/#content"},html:{replacement:"content",link:"/docs/#content"},allowEscapeKey:{replacement:"closeOnEsc",onlyRename:!0,link:"/docs/#closeonesc"},allowClickOutside:{replacement:"closeOnClickOutside",onlyRename:!0,link:"/docs/#closeonclickoutside"}}}])});